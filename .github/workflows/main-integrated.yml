name: SafeWork Pro - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  DOCKER_BUILDKIT: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  claude-analysis:
    name: Claude AI MCP Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Claude MCP Analysis
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prompt: |
            SafeWork Pro MCP Î∂ÑÏÑùÏùÑ ÏàòÌñâÌï©ÎãàÎã§.
            
            MCP ÎèÑÍµ¨ ÏÇ¨Ïö©:
            1. mcp__github__search_issues with "security" 
            2. mcp__memory__search_nodes with "safework"
            3. mcp__brave-search__brave_web_search for "Korean medical data protection"
            4. mcp__sequential-thinking__sequentialthinking for analysis
            
            ÏßëÏ§ë Î∂ÑÏÑù ÏòÅÏó≠:
            - SQL injection, XSS Ï∑®ÏïΩÏ†ê
            - ÌïúÍµ≠ ÏùòÎ£åÎ≤ï/Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§  
            - Ïù∏Ï¶ù/Ïù∏Í∞Ä Í≤∞Ìï®
            - ÏùòÎ£å Îç∞Ïù¥ÌÑ∞ Î≥¥Ïïà
            
            Ï§ëÏöî Ïù¥Ïäà Î∞úÍ≤¨ Ïãú GitHub IssueÎ•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

  backend-test:
    name: Backend Tests
    runs-on: [self-hosted, linux]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        ports:
          - 25432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 26379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout
      
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://admin:password@localhost:25432/health_management
          REDIS_URL: redis://localhost:26379/0
          JWT_SECRET: test-secret-key
          PYTHONPATH: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          echo "üß™ Running backend tests..."
          pytest tests/ -v --cov=src --cov-report=term --cov-fail-under=70 --timeout=300 -x

  frontend-test:
    name: Frontend Tests  
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run frontend tests
        working-directory: frontend
        run: |
          npm run lint
          npm run test -- --passWithNoTests
          npm run build

  security-scan:
    name: Security Scan
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build Docker Image
    needs: [backend-test, frontend-test, security-scan]
    runs-on: [self-hosted, linux]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate metadata
        id: meta
        run: |
          VERSION=$(date +%Y.%m.%d)
          BUILD_NUM=${{ github.run_number }}
          SHA_SHORT=${GITHUB_SHA:0:7}
          TAG="prod-${VERSION}.${BUILD_NUM}-${SHA_SHORT}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: [build]
    runs-on: [self-hosted, linux]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://safework.jclee.me
    
    steps:
      - name: Notify deployment
        run: |
          echo "üöÄ Docker image pushed to registry"
          echo "üì¶ Image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest"
          echo "üîÑ ArgoCD will automatically sync the deployment"
      
      - name: Verify deployment
        run: |
          echo "‚è≥ Waiting for ArgoCD sync..."
          sleep 60
          
          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://safework.jclee.me/health || echo "000")
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Application is healthy!"
              break
            else
              echo "‚è≥ Waiting for application... (attempt $i/10, status: $HTTP_STATUS)"
              sleep 30
            fi
          done