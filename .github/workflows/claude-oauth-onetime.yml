name: Claude Code 1회 OAuth 인증

on:
  workflow_dispatch:
    inputs:
      code:
        description: '인증 코드 (1단계는 비워두세요)'
        required: false
        type: string
      reset_auth:
        description: '인증 초기화 (기존 토큰 삭제)'
        required: false
        type: boolean
        default: false

permissions:
  actions: write
  contents: read

jobs:
  claude-oauth-setup:
    name: Claude OAuth 1회 인증 설정
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check authentication status
        id: auth_check
        run: |
          echo "🔍 Claude Code OAuth 상태 확인..."
          
          # 기존 토큰 확인
          ACCESS_TOKEN="${{ secrets.CLAUDE_ACCESS_TOKEN }}"
          REFRESH_TOKEN="${{ secrets.CLAUDE_REFRESH_TOKEN }}"
          EXPIRES_AT="${{ secrets.CLAUDE_EXPIRES_AT }}"
          
          if [ -n "$ACCESS_TOKEN" ] && [ -n "$REFRESH_TOKEN" ] && [ -n "$EXPIRES_AT" ]; then
            echo "existing_auth=true" >> $GITHUB_OUTPUT
            echo "✅ 기존 OAuth 토큰 발견"
            
            # 만료 시간 확인
            CURRENT_TIME=$(date +%s)
            if [ "$EXPIRES_AT" -gt "$CURRENT_TIME" ]; then
              TIME_LEFT=$(($EXPIRES_AT - $CURRENT_TIME))
              HOURS_LEFT=$((TIME_LEFT / 3600))
              echo "🕐 토큰 유효 시간: ${HOURS_LEFT}시간"
              echo "auth_valid=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ 토큰 만료됨"
              echo "auth_valid=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "existing_auth=false" >> $GITHUB_OUTPUT
            echo "auth_valid=false" >> $GITHUB_OUTPUT
            echo "❌ OAuth 토큰 없음"
          fi
      
      - name: Reset authentication if requested
        if: github.event.inputs.reset_auth == 'true'
        run: |
          echo "🔄 인증 초기화 요청됨 - 기존 토큰 무효화"
          echo "reset_requested=true" >> $GITHUB_ENV
      
      - name: Step 1 - Generate OAuth login URL
        if: |
          (steps.auth_check.outputs.existing_auth == 'false') || 
          (steps.auth_check.outputs.auth_valid == 'false') || 
          (github.event.inputs.reset_auth == 'true') && 
          (github.event.inputs.code == '')
        id: login_url
        run: |
          echo "🚀 1단계: Claude OAuth 로그인 URL 생성"
          echo ""
          echo "════════════════════════════════════════════════════════════════════════"
          echo "                        🔐 Claude OAuth 인증 시작"
          echo "════════════════════════════════════════════════════════════════════════"
          echo ""
          echo "📋 다음 단계를 따라하세요:"
          echo ""
          echo "1️⃣ 아래 URL로 이동하여 Claude에 로그인하세요:"
          echo "   👉 https://claude.ai/oauth/login"
          echo ""
          echo "2️⃣ 로그인 후 나타나는 인증 코드를 복사하세요"
          echo ""
          echo "3️⃣ 이 워크플로우를 다시 실행하되, 이번엔 'code' 필드에 인증 코드를 입력하세요:"
          echo "   • Actions 탭 → 'Claude Code 1회 OAuth 인증' → 'Run workflow'"
          echo "   • 'code' 필드에 복사한 인증 코드 입력"
          echo "   • 'Run workflow' 클릭"
          echo ""
          echo "════════════════════════════════════════════════════════════════════════"
          echo ""
          echo "⚠️  주의사항:"
          echo "   • 인증 코드는 10분 이내에 사용해야 합니다"
          echo "   • 코드는 한 번만 사용 가능합니다"
          echo "   • 실패 시 새로운 코드를 발급받아야 합니다"
          echo ""
          echo "step=1" >> $GITHUB_OUTPUT
      
      - name: Step 2 - Exchange code for tokens
        if: github.event.inputs.code != ''
        id: token_exchange
        run: |
          echo "🚀 2단계: 인증 코드를 토큰으로 교환"
          
          AUTH_CODE="${{ github.event.inputs.code }}"
          
          if [ -z "$AUTH_CODE" ]; then
            echo "❌ 인증 코드가 제공되지 않았습니다"
            exit 1
          fi
          
          echo "🔄 토큰 교환 중..."
          
          # Claude OAuth 토큰 교환 (실제 API 엔드포인트는 Claude 문서 참조)
          # 이것은 예시입니다 - 실제 구현에서는 Claude의 OAuth 2.0 엔드포인트를 사용해야 합니다
          RESPONSE=$(curl -s -X POST https://api.anthropic.com/oauth/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=authorization_code&code=$AUTH_CODE&client_id=claude-github-action" || echo "curl_failed")
          
          if [ "$RESPONSE" = "curl_failed" ]; then
            echo "❌ 토큰 교환 API 호출 실패"
            echo "📋 수동 설정 안내:"
            echo "   1. https://claude.ai/settings/oauth 에서 토큰 생성"
            echo "   2. GitHub Secrets에 수동으로 다음 값들 설정:"
            echo "      - CLAUDE_ACCESS_TOKEN"
            echo "      - CLAUDE_REFRESH_TOKEN" 
            echo "      - CLAUDE_EXPIRES_AT"
            exit 1
          fi
          
          # JSON 파싱 (jq 필요)
          if command -v jq &> /dev/null; then
            ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token // empty')
            REFRESH_TOKEN=$(echo "$RESPONSE" | jq -r '.refresh_token // empty')
            EXPIRES_IN=$(echo "$RESPONSE" | jq -r '.expires_in // empty')
            
            if [ -n "$ACCESS_TOKEN" ] && [ -n "$REFRESH_TOKEN" ] && [ -n "$EXPIRES_IN" ]; then
              EXPIRES_AT=$(($(date +%s) + $EXPIRES_IN))
              
              echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT
              echo "refresh_token=$REFRESH_TOKEN" >> $GITHUB_OUTPUT
              echo "expires_at=$EXPIRES_AT" >> $GITHUB_OUTPUT
              echo "success=true" >> $GITHUB_OUTPUT
              
              echo "✅ 토큰 교환 성공!"
              echo "🕐 토큰 만료 시간: $(date -d @$EXPIRES_AT)"
            else
              echo "❌ 유효하지 않은 토큰 응답"
              echo "📝 응답: $RESPONSE"
              echo "success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ jq가 설치되지 않아 JSON 파싱 불가"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Store tokens in GitHub Secrets
        if: steps.token_exchange.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { Octokit } = require('@octokit/rest');
            const sodium = require('tweetsodium');
            
            // GitHub Secrets API는 암호화가 필요합니다
            const octokit = new Octokit({
              auth: '${{ secrets.GITHUB_TOKEN }}'
            });
            
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // 공개 키 가져오기
            const { data: publicKey } = await octokit.rest.actions.getRepoPublicKey({
              owner,
              repo,
            });
            
            // 토큰 암호화 및 저장
            const encryptSecret = (value) => {
              const messageBytes = Buffer.from(value);
              const keyBytes = Buffer.from(publicKey.key, 'base64');
              const encryptedBytes = sodium.seal(messageBytes, keyBytes);
              return Buffer.from(encryptedBytes).toString('base64');
            };
            
            const secrets = [
              {
                name: 'CLAUDE_ACCESS_TOKEN',
                value: '${{ steps.token_exchange.outputs.access_token }}'
              },
              {
                name: 'CLAUDE_REFRESH_TOKEN', 
                value: '${{ steps.token_exchange.outputs.refresh_token }}'
              },
              {
                name: 'CLAUDE_EXPIRES_AT',
                value: '${{ steps.token_exchange.outputs.expires_at }}'
              }
            ];
            
            for (const secret of secrets) {
              try {
                await octokit.rest.actions.createOrUpdateRepoSecret({
                  owner,
                  repo,
                  secret_name: secret.name,
                  encrypted_value: encryptSecret(secret.value),
                  key_id: publicKey.key_id,
                });
                console.log(`✅ ${secret.name} 시크릿 저장 완료`);
              } catch (error) {
                console.log(`❌ ${secret.name} 시크릿 저장 실패:`, error.message);
              }
            }
      
      - name: Verify stored tokens
        if: steps.token_exchange.outputs.success == 'true'
        run: |
          echo "🔍 저장된 토큰 검증..."
          
          # 잠시 대기 (GitHub Secrets 전파 시간)
          sleep 5
          
          if [ -n "${{ secrets.CLAUDE_ACCESS_TOKEN }}" ]; then
            echo "✅ CLAUDE_ACCESS_TOKEN 저장 확인됨"
          else
            echo "❌ CLAUDE_ACCESS_TOKEN 저장 실패"
          fi
          
          if [ -n "${{ secrets.CLAUDE_REFRESH_TOKEN }}" ]; then
            echo "✅ CLAUDE_REFRESH_TOKEN 저장 확인됨"
          else
            echo "❌ CLAUDE_REFRESH_TOKEN 저장 실패"
          fi
          
          if [ -n "${{ secrets.CLAUDE_EXPIRES_AT }}" ]; then
            echo "✅ CLAUDE_EXPIRES_AT 저장 확인됨"
            EXPIRES_AT="${{ secrets.CLAUDE_EXPIRES_AT }}"
            echo "🕐 만료 시간: $(date -d @$EXPIRES_AT)"
          else
            echo "❌ CLAUDE_EXPIRES_AT 저장 실패"
          fi
      
      - name: Setup complete
        if: always()
        run: |
          echo ""
          echo "════════════════════════════════════════════════════════════════════════"
          echo "                    🎉 Claude OAuth 설정 상태"
          echo "════════════════════════════════════════════════════════════════════════"
          echo ""
          
          if [ "${{ steps.token_exchange.outputs.success }}" = "true" ]; then
            echo "✅ Claude OAuth 인증 완료!"
            echo ""
            echo "📋 다음 단계:"
            echo "   1. 이제 @claude 멘션을 사용할 수 있습니다"
            echo "   2. Issue나 PR에서 '@claude 도움이 필요해요' 같이 멘션하세요"
            echo "   3. 토큰은 자동으로 갱신됩니다"
            echo ""
            echo "🔧 사용 가능한 액션:"
            echo "   • claude-official-action.yml (공식 Anthropic 액션)"
            echo "   • main-integrated.yml (MCP 도구 체인 분석)"
            echo ""
          elif [ "${{ steps.login_url.outputs.step }}" = "1" ]; then
            echo "📋 1단계 완료 - 이제 인증 코드로 2단계를 진행하세요"
            echo ""
            echo "🔄 다음 할 일:"
            echo "   1. 위에 표시된 URL로 이동하여 Claude 로그인"
            echo "   2. 인증 코드 복사"  
            echo "   3. 이 워크플로우를 인증 코드와 함께 다시 실행"
            echo ""
          else
            echo "⚠️ OAuth 설정이 완료되지 않았습니다"
            echo ""
            echo "📋 문제 해결:"
            echo "   • 새로운 인증 코드로 다시 시도하세요"
            echo "   • 또는 reset_auth=true로 인증을 초기화하세요"
            echo ""
          fi
          
          echo "════════════════════════════════════════════════════════════════════════"