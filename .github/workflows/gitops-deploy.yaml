name: GitOps CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: ${{ vars.APP_NAME }}
  CHART_NAME: ${{ vars.APP_NAME }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME || 'anonymous' }}
          password: ${{ secrets.REGISTRY_PASSWORD || '' }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=prod-{{date 'YYYYMMDD'}}-{{sha}},enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=1.{{date 'YYYYMMDD'}}.{{github.run_number}},enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Install Helm
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Package and push Helm chart
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          # Chart 버전 설정
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            CHART_VERSION="${{ github.ref_name }}"
            CHART_VERSION=${CHART_VERSION#v}
          else
            CHART_VERSION="0.1.0-${{ github.sha }}"
          fi
          
          # 프로덕션 이미지 태그 추출
          PROD_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -E "prod-[0-9]{8}-[a-f0-9]{7}" | head -n1 | cut -d: -f2)
          if [ -z "$PROD_TAG" ]; then
            PROD_TAG="latest"
          fi
          
          echo "Chart Version: ${CHART_VERSION}"
          echo "Image Tag: ${PROD_TAG}"
          
          # Chart 버전과 이미지 태그 업데이트
          sed -i "s/^version:.*/version: ${CHART_VERSION}/" ./charts/${{ env.CHART_NAME }}/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${PROD_TAG}\"/" ./charts/${{ env.CHART_NAME }}/Chart.yaml
          sed -i "s/tag:.*/tag: \"${PROD_TAG}\"/" ./charts/${{ env.CHART_NAME }}/values.yaml
          
          # Helm chart 패키징
          helm package ./charts/${{ env.CHART_NAME }}
          
          # ChartMuseum에 업로드
          CHART_FILE="${{ env.CHART_NAME }}-${CHART_VERSION}.tgz"
          echo "Uploading ${CHART_FILE} to ChartMuseum..."
          
          response=$(curl -s -w "\n%{http_code}" \
            -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            --data-binary "@${CHART_FILE}" \
            ${{ secrets.CHARTMUSEUM_URL }}/api/charts)
          
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n-1)
          
          if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
            echo "✅ Chart upload successful: ${CHART_VERSION}"
            echo "Response: $body"
          else
            echo "❌ Chart upload failed with HTTP $http_code"
            echo "Response: $body"
            exit 1
          fi

      - name: Summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY