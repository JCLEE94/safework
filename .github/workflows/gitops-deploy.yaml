name: GitOps CI/CD Pipeline

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    
env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: safework
  CHART_NAME: safework
  NAMESPACE: safework
  
jobs:
  test:
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest tests/ -v --timeout=60 -x

  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        run: |
          echo "레지스트리 로그인 (공개 레지스트리로 인증 생략)"
          
      - name: Extract metadata
        id: meta
        run: |
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          BUILD_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          
          # 태그 생성
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="latest"
          fi
          
          PROD_TAG="prod-$(date +%Y%m%d)-${COMMIT_SHA:0:7}"
          
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}" >> $GITHUB_OUTPUT
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${PROD_TAG}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "prod_tag=${PROD_TAG}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        run: |
          # All-in-one 이미지 빌드
          docker build \
            -f deployment/Dockerfile.allinone \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.prod_tag }} \
            --build-arg BUILD_TIME="${{ steps.meta.outputs.build_date }}" \
            .
          
          # 레지스트리에 푸시 (공개 레지스트리)
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.prod_tag }}
          
          echo "✅ Docker 이미지 푸시 완료"
          echo "- 태그: ${{ steps.meta.outputs.version }}"
          echo "- 프로덕션 태그: ${{ steps.meta.outputs.prod_tag }}"
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.14.0'
          
      - name: Package and deploy Helm chart
        env:
          CHARTMUSEUM_URL: https://charts.jclee.me
          CHARTMUSEUM_USERNAME: admin
          CHARTMUSEUM_PASSWORD: bingogo1
        run: |
          set -euo pipefail
          
          # 버전 정보 설정
          COMMIT_SHA="${{ github.sha }}"
          CHART_VERSION="1.0.0-${COMMIT_SHA:0:7}"
          IMAGE_TAG="${{ steps.meta.outputs.prod_tag }}"
          
          echo "📦 Helm Chart 패키징 시작"
          echo "Chart Version: ${CHART_VERSION}"
          echo "Image Tag: ${IMAGE_TAG}"
          
          # Chart 버전과 이미지 태그 업데이트
          sed -i "s/^version:.*/version: ${CHART_VERSION}/" ./charts/${{ env.CHART_NAME }}/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${IMAGE_TAG}\"/" ./charts/${{ env.CHART_NAME }}/Chart.yaml
          sed -i "s/tag:.*/tag: \"${IMAGE_TAG}\"/" ./charts/${{ env.CHART_NAME }}/values.yaml
          
          # Helm 차트 패키징
          helm package ./charts/${{ env.CHART_NAME }} --destination ./
          
          # ChartMuseum에 업로드
          CHART_FILE="${{ env.CHART_NAME }}-${CHART_VERSION}.tgz"
          
          echo "📤 ${CHART_FILE}를 ChartMuseum에 업로드 중..."
          
          HTTP_CODE=$(curl -w "%{http_code}" -s -o /tmp/upload_response.txt \
            -u ${CHARTMUSEUM_USERNAME}:${CHARTMUSEUM_PASSWORD} \
            --data-binary "@${CHART_FILE}" \
            ${CHARTMUSEUM_URL}/api/charts)
          
          echo "HTTP Response Code: ${HTTP_CODE}"
          echo "Response Body:"
          cat /tmp/upload_response.txt
          
          if [ "${HTTP_CODE}" = "201" ] || [ "${HTTP_CODE}" = "409" ]; then
            echo "✅ Chart 업로드 성공: ${CHART_VERSION}"
          else
            echo "❌ Chart 업로드 실패 (HTTP ${HTTP_CODE})"
            exit 1
          fi
          
          # 업로드된 차트 확인
          echo "🔍 Chart 업로드 검증 중..."
          curl -s -u ${CHARTMUSEUM_USERNAME}:${CHARTMUSEUM_PASSWORD} \
            ${CHARTMUSEUM_URL}/api/charts/${{ env.CHART_NAME }} | \
            grep -q "${CHART_VERSION}" && echo "✅ Chart 검증 완료" || echo "⚠ Chart 검증 실패"
            
      - name: Update ArgoCD Application
        env:
          ARGOCD_URL: argo.jclee.me
          ARGOCD_USERNAME: admin
          ARGOCD_PASSWORD: bingogo1
        run: |
          set -euo pipefail
          
          # ArgoCD CLI 설치 (이미 설치된 경우 건너뜀)
          if ! command -v argocd &> /dev/null; then
            echo "📥 ArgoCD CLI 설치 중..."
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64
          fi
          
          # ArgoCD 로그인
          echo "🔐 ArgoCD 로그인 중..."
          argocd login ${ARGOCD_URL} \
            --username ${ARGOCD_USERNAME} \
            --password ${ARGOCD_PASSWORD} \
            --insecure --grpc-web
          
          # 애플리케이션 동기화
          echo "🔄 ArgoCD 애플리케이션 동기화 중..."
          if argocd app get safework-gitops --grpc-web > /dev/null 2>&1; then
            argocd app sync safework-gitops --grpc-web
            echo "✅ 애플리케이션 동기화 완료"
          else
            echo "⚠ 애플리케이션이 존재하지 않습니다. 수동으로 생성하세요."
          fi
            
      - name: Deployment notification
        if: success()
        run: |
          echo "🚀 SafeWork Pro 배포 완료!"
          echo "- 이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.prod_tag }}"
          echo "- Chart 버전: 1.0.0-${{ github.sha:0:7 }}"
          echo "- 접속 URL: https://safework.jclee.me"
          echo "- NodePort: 32301"
          
      - name: Deployment failure notification
        if: failure()
        run: |
          echo "❌ SafeWork Pro 배포 실패!"
          echo "- 로그를 확인하여 문제를 해결하세요."