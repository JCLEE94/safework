name: Main CI/CD Pipeline (Improved)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Test Suite
    runs-on: [self-hosted, linux]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Run Backend Tests (STRICT)
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key
          PYTHONPATH: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          
          echo "🧪 Running backend tests with strict failure handling..."
          pytest tests/ -v --cov=src --cov-report=term --cov-fail-under=70 --timeout=300 -x
          
          if [ $? -ne 0 ]; then
            echo "❌ Backend tests failed - stopping deployment pipeline"
            exit 1
          fi
          echo "✅ All backend tests passed"
      
      - name: Claude Code Analysis
        env:
          CLAUDE_ACCESS_TOKEN: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
        run: |
          echo "🤖 Running Claude AI code analysis..."
          
          # Create analysis prompt
          cat > analysis_prompt.txt << 'EOF'
          이 SafeWork Pro 건설업 보건관리 시스템의 코드베이스를 분석해주세요:

          ## 분석 요청 사항:
          1. 🔒 보안 취약점 분석 (SQL Injection, XSS, CSRF 등)
          2. 📊 코드 품질 및 베스트 프랙티스 검토
          3. ⚡ 성능 최적화 제안사항
          4. 🐛 버그 및 잠재적 문제점 식별
          5. 📝 한국어 주석 및 문서화 개선 제안
          6. 🏗️ FastAPI + React + PostgreSQL 아키텍처 최적화
          7. 🦺 건설업 보건관리 특화 데이터 처리 검토

          ## 코드베이스 구조:
          - Backend: FastAPI (Python)
          - Frontend: React (TypeScript)  
          - Database: PostgreSQL
          - Cache: Redis
          - Deployment: Docker + Kubernetes + ArgoCD

          분석 결과를 Issue로 생성하여 개발팀이 검토할 수 있도록 해주세요.
          EOF
          
          # Get recent changes for focused analysis
          echo "📂 Recent code changes:"
          git log --oneline -5
          echo ""
          
          # Get file statistics
          echo "📊 Codebase statistics:"
          find . -name "*.py" -o -name "*.tsx" -o -name "*.ts" | grep -v node_modules | grep -v __pycache__ | wc -l
          echo "Python files:" $(find . -name "*.py" | grep -v __pycache__ | wc -l)
          echo "TypeScript/React files:" $(find . -name "*.tsx" -o -name "*.ts" | grep -v node_modules | wc -l)
          
          # API call to Claude (simplified for CI/CD)
          curl -X POST "https://api.anthropic.com/v1/messages" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $CLAUDE_ACCESS_TOKEN" \
            -H "anthropic-version: 2023-06-01" \
            -d '{
              "model": "claude-3-sonnet-20240229",
              "max_tokens": 4000,
              "messages": [
                {
                  "role": "user", 
                  "content": "SafeWork Pro 건설업 보건관리 시스템 코드 분석을 요청합니다. 주요 보안, 성능, 코드 품질 이슈를 간단히 요약해주세요."
                }
              ]
            }' > claude_analysis.json || echo "⚠️ Claude API call failed, continuing pipeline..."
          
          # Extract and display results if successful
          if [ -f claude_analysis.json ]; then
            echo "✅ Claude analysis completed"
            cat claude_analysis.json | jq -r '.content[0].text' 2>/dev/null || echo "📄 Analysis saved to claude_analysis.json"
          fi
      
      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  build:
    name: Build and Push
    needs: test
    runs-on: [self-hosted, linux]
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate metadata
        id: meta
        run: |
          TAG="prod-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          cache-from: |
            type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
            type=gha,scope=safework
          cache-to: |
            type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            type=gha,mode=max,scope=safework
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

  notify:
    name: Deployment Notification
    needs: build
    runs-on: [self-hosted, linux]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.build.result == 'success'
        run: |
          echo "✅ Image pushed successfully: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
          echo "🤖 ArgoCD Image Updater will automatically deploy the new image"
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `[CI/CD Failure] Main CI/CD Pipeline - ${context.ref.replace('refs/heads/', '')}`;
            
            // Check for existing open issues with same title
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'bug'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === issueTitle);
            
            if (!existingIssue) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `## 🚨 CI/CD Pipeline Failure\n\n**Workflow:** Main CI/CD Pipeline\n**Branch:** ${context.ref.replace('refs/heads/', '')}\n**Commit:** ${context.sha.substring(0, 7)}\n**Time:** ${new Date().toISOString()}\n**Actor:** @${context.actor}\n\n### 📋 Details\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n### 🔧 Common Solutions\n\n1. Check Docker build logs\n2. Verify registry credentials\n3. Check Dockerfile syntax\n4. Ensure all dependencies are available\n\n---\n*Automatically created by CI/CD failure tracking*`,
                labels: ['bug', 'ci/cd']
              });
              console.log(`Created issue #${issue.data.number}`);
            } else {
              console.log(`Issue already exists: #${existingIssue.number}`);
            }