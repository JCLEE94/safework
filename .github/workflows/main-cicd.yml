name: Main CI/CD Pipeline (Improved)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Test Suite
    runs-on: [self-hosted, linux]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Run Backend Tests (STRICT)
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key
          PYTHONPATH: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          
          echo "🧪 Running backend tests with strict failure handling..."
          pytest tests/ -v --cov=src --cov-report=term --cov-fail-under=70 --timeout=300 -x
          
          if [ $? -ne 0 ]; then
            echo "❌ Backend tests failed - stopping deployment pipeline"
            exit 1
          fi
          echo "✅ All backend tests passed"
      
      - name: Claude Max Code Review
        uses: grll/claude-code-base-action@beta
        continue-on-error: true
        with:
          prompt: |
            🤖 SafeWork Pro 건설업 보건관리 시스템 코드 리뷰를 진행해주세요.
            
            ## 🎯 프로젝트 컨텍스트:
            - **도메인**: 건설업 산업안전보건 관리 시스템
            - **기술스택**: FastAPI (Python) + React (TypeScript) + PostgreSQL + Redis
            - **컴플라이언스**: 한국 산업안전보건법 준수 필요
            - **데이터**: 근로자 건강정보, MSDS, 사고보고, 건강검진 결과
            
            ## 🔍 주요 검토 기준:
            1. **보안 검토** (최우선):
               - SQL Injection, XSS, CSRF 취약점
               - 개인정보보호법 준수 (근로자 건강정보)
               - JWT 토큰 및 인증/인가 구조
               - 민감정보 로깅 및 노출 방지
            
            2. **성능 최적화**:
               - 데이터베이스 쿼리 최적화
               - Redis 캐싱 전략
               - API 응답시간 개선
               - 불필요한 N+1 쿼리 제거
            
            3. **코드 품질**:
               - FastAPI 베스트 프랙티스
               - React 컴포넌트 구조
               - 타입 안전성 (TypeScript)
               - 에러 핸들링 및 로깅
            
            4. **도메인 특화 검토**:
               - 건강검진 데이터 무결성
               - MSDS 화학물질 관리 정확성
               - 사고보고 프로세스 준수
               - 근로자 개인정보 보호
            
            ## 📋 검토 결과 형식:
            
            ### ✅ 잘 구현된 부분
            - 구체적인 좋은 점들...
            
            ### ⚠️ 개선이 필요한 부분
            - 우선순위별 이슈 (High/Medium/Low)
            - 구체적인 수정 방안 제시
            
            ### 🚀 추가 제안사항
            - 성능 향상 아이디어
            - 보안 강화 방안
            - 코드 구조 개선
            
            **최근 변경사항을 중심으로 분석하되, 전체 코드베이스의 일관성도 함께 검토해주세요.**
            **한국어로 상세하고 실행가능한 피드백을 제공해주세요.**
          
          use_oauth: "true"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          model: "claude-3-haiku-20240307"
          allowed_tools: "mcp__github__add_issue_comment,mcp__github__create_issue"
      
      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  build:
    name: Build and Push
    needs: test
    runs-on: [self-hosted, linux]
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate metadata
        id: meta
        run: |
          TAG="prod-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          cache-from: |
            type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
            type=gha,scope=safework
          cache-to: |
            type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            type=gha,mode=max,scope=safework
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

  notify:
    name: Deployment Notification
    needs: build
    runs-on: [self-hosted, linux]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.build.result == 'success'
        run: |
          echo "✅ Image pushed successfully: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
          echo "🤖 ArgoCD Image Updater will automatically deploy the new image"
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `[CI/CD Failure] Main CI/CD Pipeline - ${context.ref.replace('refs/heads/', '')}`;
            
            // Check for existing open issues with same title
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'bug'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === issueTitle);
            
            if (!existingIssue) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `## 🚨 CI/CD Pipeline Failure\n\n**Workflow:** Main CI/CD Pipeline\n**Branch:** ${context.ref.replace('refs/heads/', '')}\n**Commit:** ${context.sha.substring(0, 7)}\n**Time:** ${new Date().toISOString()}\n**Actor:** @${context.actor}\n\n### 📋 Details\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n### 🔧 Common Solutions\n\n1. Check Docker build logs\n2. Verify registry credentials\n3. Check Dockerfile syntax\n4. Ensure all dependencies are available\n\n---\n*Automatically created by CI/CD failure tracking*`,
                labels: ['bug', 'ci/cd']
              });
              console.log(`Created issue #${issue.data.number}`);
            } else {
              console.log(`Issue already exists: #${existingIssue.number}`);
            }