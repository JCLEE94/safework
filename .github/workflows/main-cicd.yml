name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework

jobs:
  build:
    name: Build and Push
    runs-on: [self-hosted, linux]
    outputs:
      status: ${{ job.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build and push Docker image
        run: |
          # Login to registry
          echo "bingogo1" | docker login ${{ env.REGISTRY_URL }} -u "qws9411" --password-stdin
          
          # Build image
          docker build -f deployment/Dockerfile.prod -t ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest .
          
          # Push image
          docker push ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          
          echo "✅ Image pushed successfully!"
      
      - name: Update K8s manifests
        run: |
          # Get image digest
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest | cut -d'@' -f2)
          echo "Image digest: $IMAGE_DIGEST"
          
          # Update deployment manifest
          echo "Before update:"
          grep "image:" k8s/deployment.yaml
          sed -i "s|image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}@.*|image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST}|g" k8s/deployment.yaml
          echo "After update:"
          grep "image:" k8s/deployment.yaml
          
          # Commit and push changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add k8s/deployment.yaml
          git diff --staged
          if ! git diff --staged --quiet; then
            git commit -m "chore: update image to ${IMAGE_DIGEST:0:12}"
            git push
            echo "✅ K8s manifest updated and pushed"
          else
            echo "ℹ️ No changes to commit"
          fi
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `[CI/CD Failure] Main CI/CD Pipeline - ${context.ref.replace('refs/heads/', '')}`;
            
            // Check for existing open issues with same title
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'bug'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === issueTitle);
            
            if (!existingIssue) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `## 🚨 CI/CD Pipeline Failure\n\n**Workflow:** Main CI/CD Pipeline\n**Branch:** ${context.ref.replace('refs/heads/', '')}\n**Commit:** ${context.sha.substring(0, 7)}\n**Time:** ${new Date().toISOString()}\n**Actor:** @${context.actor}\n\n### 📋 Details\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n### 🔧 Common Solutions\n\n1. Check Docker build logs\n2. Verify registry credentials\n3. Check Dockerfile syntax\n4. Ensure all dependencies are available\n\n---\n*Automatically created by CI/CD failure tracking*`,
                labels: ['bug', 'ci/cd']
              });
              console.log(`Created issue #${issue.data.number}`);
            } else {
              console.log(`Issue already exists: #${existingIssue.number}`);
            }