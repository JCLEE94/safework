name: Main CI/CD Pipeline (Improved)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Test Suite
    runs-on: [self-hosted, linux]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Run Backend Tests (STRICT)
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key
          PYTHONPATH: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          
          echo "🧪 Running backend tests with strict failure handling..."
          pytest tests/ -v --cov=src --cov-report=term --cov-fail-under=70 --timeout=300 -x
          
          if [ $? -ne 0 ]; then
            echo "❌ Backend tests failed - stopping deployment pipeline"
            exit 1
          fi
          echo "✅ All backend tests passed"
      
      - name: Claude AI Code Review
        continue-on-error: true
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🤖 Claude AI Code Review 시작..."
          
          # 변경된 파일들 분석
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(py|tsx?|js|yaml|yml)$' | head -10)
          echo "📂 변경된 파일들: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "🔍 변경된 코드 파일이 없습니다. 스킵합니다."
            exit 0
          fi
          
          # 변경된 파일 내용 수집 (보안을 위해 일부만)
          CODE_CONTEXT=""
          for file in $CHANGED_FILES; do
            if [ -f "$file" ] && [ $(wc -l < "$file") -lt 200 ]; then
              echo "🔍 분석 중: $file"
              CODE_CONTEXT="$CODE_CONTEXT\n\n### $file:\n$(head -50 "$file")"
            fi
          done
          
          # Claude API 호출
          REVIEW_PROMPT="SafeWork Pro 건설업 보건관리 시스템의 코드 변경사항을 검토해주세요.
          
          ## 최근 변경 파일들:
          $CHANGED_FILES
          
          ## 검토 요청사항:
          1. 보안 이슈 (SQL Injection, XSS, 인증/인가)
          2. 성능 문제점
          3. 코드 품질 (가독성, 유지보수성)
          4. 버그 가능성
          5. 건설업 보건관리 도메인 특화 이슈
          
          ## 컨텍스트:
          - FastAPI + React + PostgreSQL 스택
          - 근로자 건강정보, MSDS, 사고보고 처리
          - 한국 산업안전보건법 준수 필요
          
          간결하고 실행 가능한 피드백을 제공해주세요."
          
          # API 호출 및 결과 처리
          curl -s -X POST "https://api.anthropic.com/v1/messages" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d "{
              \"model\": \"claude-3-haiku-20240307\",
              \"max_tokens\": 2000,
              \"messages\": [{
                \"role\": \"user\",
                \"content\": $(echo "$REVIEW_PROMPT" | jq -Rs .)
              }]
            }" > claude_review.json
          
          # 결과 확인 및 출력
          if [ -f claude_review.json ] && jq -e '.content[0].text' claude_review.json >/dev/null 2>&1; then
            echo "✅ Claude 코드 리뷰 완료"
            echo "📋 리뷰 결과:"
            echo "================================================"
            jq -r '.content[0].text' claude_review.json
            echo "================================================"
            
            # GitHub 코멘트로 결과 추가 (선택적)
            REVIEW_TEXT=$(jq -r '.content[0].text' claude_review.json)
            if [ ${#REVIEW_TEXT} -lt 65000 ]; then
              curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments" \
                -d "{\"body\": \"## 🤖 Claude AI 코드 리뷰\n\n$REVIEW_TEXT\"}" || true
            fi
          else
            echo "⚠️ Claude API 호출 실패 또는 응답 오류"
            cat claude_review.json 2>/dev/null || echo "응답 파일 없음"
          fi
      
      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  build:
    name: Build and Push
    needs: test
    runs-on: [self-hosted, linux]
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate metadata
        id: meta
        run: |
          TAG="prod-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          cache-from: |
            type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
            type=gha,scope=safework
          cache-to: |
            type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            type=gha,mode=max,scope=safework
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

  notify:
    name: Deployment Notification
    needs: build
    runs-on: [self-hosted, linux]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.build.result == 'success'
        run: |
          echo "✅ Image pushed successfully: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
          echo "🤖 ArgoCD Image Updater will automatically deploy the new image"
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `[CI/CD Failure] Main CI/CD Pipeline - ${context.ref.replace('refs/heads/', '')}`;
            
            // Check for existing open issues with same title
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'bug'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === issueTitle);
            
            if (!existingIssue) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `## 🚨 CI/CD Pipeline Failure\n\n**Workflow:** Main CI/CD Pipeline\n**Branch:** ${context.ref.replace('refs/heads/', '')}\n**Commit:** ${context.sha.substring(0, 7)}\n**Time:** ${new Date().toISOString()}\n**Actor:** @${context.actor}\n\n### 📋 Details\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n### 🔧 Common Solutions\n\n1. Check Docker build logs\n2. Verify registry credentials\n3. Check Dockerfile syntax\n4. Ensure all dependencies are available\n\n---\n*Automatically created by CI/CD failure tracking*`,
                labels: ['bug', 'ci/cd']
              });
              console.log(`Created issue #${issue.data.number}`);
            } else {
              console.log(`Issue already exists: #${existingIssue.number}`);
            }