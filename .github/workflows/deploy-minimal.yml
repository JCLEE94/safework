# SafeWork Pro - 최소 배포 파이프라인 (빌링 문제 해결)
# GitHub Free Tier 제한을 고려한 간소화된 워크플로우

name: Deploy Minimal

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/deploy-optimized.yml'
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: safework

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 기본 검증만 수행 (2분 이내)
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Structure check
        run: |
          echo "📁 Checking files..."
          ls -la src/ frontend/ deployment/ || true
          echo "✅ Basic validation complete"

  # Docker 빌드 (10분 이내)
  build:
    name: Build Image
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create minimal frontend
        run: |
          mkdir -p frontend/dist
          cat > frontend/dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>SafeWork Pro</title></head>
          <body>
            <h1>SafeWork Pro - 건설업 보건관리</h1>
            <p>Build: ${{ github.run_number }} | Commit: ${{ github.sha }}</p>
          </body>
          </html>
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate tag
        id: tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAG="minimal-$(date +%Y%m%d)-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          push: false
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          outputs: type=docker,dest=/tmp/safework-image.tar

      - name: Save image info
        run: |
          echo "Image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"
          echo "Saved to: /tmp/safework-image.tar"
          ls -lh /tmp/safework-image.tar || echo "Image file not found"

  # 상태 보고
  status:
    name: Status
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always()
    timeout-minutes: 1
    
    steps:
      - name: Report status
        run: |
          echo "## 📊 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Image ready for manual deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi