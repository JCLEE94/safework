name: Pipeline Health Monitor

on:
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행
  workflow_dispatch:

jobs:
  monitor:
    name: Monitor CI/CD Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check recent workflow runs
        id: check-runs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get recent workflow runs
          RUNS=$(gh run list --limit 10 --json status,conclusion,name,createdAt)
          
          # Count failures
          FAILED=$(echo "$RUNS" | jq '[.[] | select(.conclusion == "failure")] | length')
          TOTAL=$(echo "$RUNS" | jq 'length')
          
          # Calculate failure rate
          if [ $TOTAL -gt 0 ]; then
            FAILURE_RATE=$((FAILED * 100 / TOTAL))
          else
            FAILURE_RATE=0
          fi
          
          echo "failure_rate=$FAILURE_RATE" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED" >> $GITHUB_OUTPUT
          echo "total_count=$TOTAL" >> $GITHUB_OUTPUT
          
          # Print summary
          echo "## CI/CD Health Summary"
          echo "- Total runs: $TOTAL"
          echo "- Failed runs: $FAILED"
          echo "- Failure rate: $FAILURE_RATE%"
          
      - name: Check Docker image size
        continue-on-error: true
        run: |
          # Get latest image size
          IMAGE_INFO=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/safework/versions \
            --jq '.[0].metadata.container.tags[0] as $tag | .[0].metadata.container.total_size as $size | "\($tag): \($size / 1024 / 1024) MB"')
          
          echo "## Latest Image Size"
          echo "$IMAGE_INFO"
          
      - name: Generate health report
        if: steps.check-runs.outputs.failure_rate > 20
        run: |
          cat > pipeline-health-report.md << EOF
          # CI/CD Pipeline Health Report
          
          ## Alert: High Failure Rate Detected
          
          - **Failure Rate**: ${{ steps.check-runs.outputs.failure_rate }}%
          - **Failed Runs**: ${{ steps.check-runs.outputs.failed_count }}/${{ steps.check-runs.outputs.total_count }}
          - **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Common Failure Patterns
          
          1. **413 Request Entity Too Large**
             - Status: Mitigated by using GitHub Container Registry
             - Action: Monitor image size growth
          
          2. **Test Timeouts**
             - Status: Improved with parallel execution
             - Action: Continue monitoring test duration
          
          3. **Service Container Issues**
             - Status: Fixed with increased health check retries
             - Action: Monitor for recurrence
          
          ## Recommendations
          
          1. Review recent failed runs
          2. Check for new error patterns
          3. Update retry logic if needed
          
          EOF
          
          # Create issue if failure rate is high
          if [ ${{ steps.check-runs.outputs.failure_rate }} -gt 30 ]; then
            gh issue create \
              --title "CI/CD Pipeline Health Alert: ${{ steps.check-runs.outputs.failure_rate }}% Failure Rate" \
              --body-file pipeline-health-report.md \
              --label "ci/cd,urgent"
          fi