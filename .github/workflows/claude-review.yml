name: Claude AI Code Review

on:
  # PR ÏΩîÎ©òÌä∏ÏóêÏÑú @claude Î©òÏÖò
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  
  # PR ÏÉùÏÑ±/ÏóÖÎç∞Ïù¥Ìä∏ Ïãú ÏûêÎèô Î¶¨Î∑∞
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
      - '**.yml'
      - '**.yaml'
      - 'Dockerfile*'
  
  # Push Ïù¥Î≤§Ìä∏ (main Î∏åÎûúÏπò Ï†úÏô∏)
  push:
    branches-ignore:
      - main
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
      - '**.yml'
      - '**.yaml'
      - 'Dockerfile*'
  
  # ÏàòÎèô Ïã§Ìñâ
  workflow_dispatch:
    inputs:
      action:
        description: 'Claude action to perform'
        required: true
        type: choice
        options:
          - code-review
          - security-audit
          - performance-check
          - test-generation
          - documentation
          - refactor-suggestions
        default: code-review
      target:
        description: 'Target files or directories'
        required: false
        type: string
        default: '.'

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  claude-review:
    name: Claude AI Review
    runs-on: ubuntu-latest
    # @claude Î©òÏÖòÏù¥ ÏûàÍ±∞ÎÇò PR Ïù¥Î≤§Ìä∏Ïù∏ Í≤ΩÏö∞Îßå Ïã§Ìñâ
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request' ||
      (github.event.comment && contains(github.event.comment.body, '@claude'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup review context
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.eventName;
            let action = 'code-review';
            let target = '.';
            let issueNumber = null;
            let prompt = '';
            
            // Ïù¥Î≤§Ìä∏Î≥Ñ Ïª®ÌÖçÏä§Ìä∏ ÌååÏïÖ
            if (event === 'workflow_dispatch') {
              action = context.payload.inputs.action;
              target = context.payload.inputs.target;
            } else if (event === 'pull_request') {
              issueNumber = context.payload.pull_request.number;
              action = 'code-review';
              
              // PR Î≥ÄÍ≤Ω ÌååÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: issueNumber
              });
              
              target = files.map(f => f.filename).join(' ');
            } else if (event.includes('comment')) {
              const comment = context.payload.comment.body;
              issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
              
              // ÏΩîÎ©òÌä∏ÏóêÏÑú Ïï°ÏÖò ÌååÏã±
              if (comment.includes('security')) action = 'security-audit';
              else if (comment.includes('performance')) action = 'performance-check';
              else if (comment.includes('test')) action = 'test-generation';
              else if (comment.includes('docs')) action = 'documentation';
              else if (comment.includes('refactor')) action = 'refactor-suggestions';
              
              // ÌÉÄÍ≤ü ÌååÏùº Ï∂îÏ∂ú
              const targetMatch = comment.match(/@claude\s+(\S+)\s+(.+)/);
              if (targetMatch) target = targetMatch[2];
            }
            
            // Ïï°ÏÖòÎ≥Ñ ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
            switch(action) {
              case 'code-review':
                prompt = `Please perform a comprehensive code review focusing on:
                1. Code quality and best practices
                2. Potential bugs or logic errors
                3. Performance implications
                4. Security vulnerabilities
                5. Maintainability and readability
                6. Korean healthcare industry compliance (ÏùòÎ£åÎ≤ï, Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï)
                
                Context: This is a healthcare management system for construction sites in Korea.`;
                break;
                
              case 'security-audit':
                prompt = `Conduct a thorough security audit examining:
                1. SQL injection vulnerabilities
                2. XSS and CSRF protection
                3. Authentication/authorization issues
                4. Sensitive data exposure
                5. Korean privacy law compliance (Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏Î≤ï, ÏùòÎ£åÎ≤ï)
                6. API security best practices
                
                Pay special attention to medical data handling and worker privacy.`;
                break;
                
              case 'performance-check':
                prompt = `Analyze performance characteristics:
                1. Database query optimization (N+1 queries, indexes)
                2. Caching opportunities
                3. Async/await usage
                4. Memory leaks
                5. API response times
                6. Frontend bundle size and loading performance`;
                break;
                
              case 'test-generation':
                prompt = `Generate comprehensive tests:
                1. Unit tests for business logic
                2. Integration tests for API endpoints
                3. Edge cases and error scenarios
                4. Korean data validation (Ï£ºÎØºÎ≤àÌò∏, ÏÇ¨ÏóÖÏûêÎ≤àÌò∏ formats)
                5. Async operation testing
                Use pytest for Python and Jest for JavaScript.`;
                break;
                
              case 'documentation':
                prompt = `Create or improve documentation:
                1. Function/class docstrings
                2. API endpoint documentation
                3. Complex logic explanations
                4. Korean terminology explanations
                5. Usage examples
                Use Korean for user-facing docs, English for technical docs.`;
                break;
                
              case 'refactor-suggestions':
                prompt = `Suggest refactoring improvements:
                1. Code duplication removal
                2. Design pattern applications
                3. SOLID principles adherence
                4. Type safety improvements
                5. Error handling enhancements
                6. Korean naming convention compliance`;
                break;
            }
            
            core.setOutput('action', action);
            core.setOutput('target', target);
            core.setOutput('issue_number', issueNumber);
            core.setOutput('prompt', prompt);
      
      - name: Get diff context for PR
        if: github.event_name == 'pull_request'
        id: diff
        run: |
          # Get PR diff
          gh pr diff ${{ steps.context.outputs.issue_number }} > pr.diff
          
          # Get changed files summary
          echo "### Changed Files:" > diff-summary.txt
          gh pr diff ${{ steps.context.outputs.issue_number }} --name-only >> diff-summary.txt
          
          echo "### Diff Statistics:" >> diff-summary.txt
          gh pr diff ${{ steps.context.outputs.issue_number }} --stat >> diff-summary.txt
      
      - name: Run Claude AI Analysis
        uses: grll/claude-code-base-action@beta
        with:
          prompt: ${{ steps.context.outputs.prompt }}
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          anthropic_model: claude-3-5-sonnet-20241022
          max_turns: 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Post review results
        if: always() && steps.context.outputs.issue_number
        uses: actions/github-script@v7
        with:
          script: |
            const action = '${{ steps.context.outputs.action }}';
            const status = '${{ job.status }}';
            
            let message = `## ü§ñ Claude AI ${action} Report\n\n`;
            
            if (status === 'success') {
              message += `‚úÖ Analysis completed successfully\n\n`;
              message += `Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;
            } else {
              message += `‚ö†Ô∏è Analysis completed with issues\n\n`;
              message += `Please check the logs for more information.`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.context.outputs.issue_number }},
              body: message
            });
      

