name: Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY || 'registry.jclee.me' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'health-management-system' }}
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || '192.168.50.215' }}
  DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '1111' }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER || 'docker' }}
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # Build and Test
  build-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-time: ${{ steps.version.outputs.build-time }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Version and Build Time
      - name: Generate version info
        id: version
        run: |
          VERSION="${GITHUB_REF_NAME}-${GITHUB_SHA::8}"
          BUILD_TIME=$(TZ=Asia/Seoul date +"%Y-%m-%d %H:%M:%S KST")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build-time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Version: ${VERSION}"
          echo "üïê Build Time: ${BUILD_TIME}"
      
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Frontend build
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Build frontend with build time
        env:
          VITE_BUILD_TIME: ${{ steps.version.outputs.build-time }}
          VITE_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Building frontend with build time: $VITE_BUILD_TIME"
          npm run build
      
      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      # Backend tests
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
      
      - name: Run backend tests
        run: |
          mkdir -p logs
          pytest tests/ -v --tb=short --cov=src --cov-report=term-missing
        continue-on-error: false
      
      # Upload artifacts
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 1

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      # Download frontend build
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/
      
      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.0
      
      # Login to Docker Hub (for base images)
      - name: Login to Docker Hub for base images
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Login to Private Registry
      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      # Build and push to private registry
      - name: Build and push to private registry
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          build-args: |
            BUILD_TIME=${{ needs.build-test.outputs.build-time }}
            VERSION=${{ needs.build-test.outputs.version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-test.outputs.version }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            type=gha
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            type=gha,mode=max
          labels: |
            org.opencontainers.image.title=SafeWork Pro
            org.opencontainers.image.description=Í±¥ÏÑ§ÏóÖ Î≥¥Í±¥Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
            org.opencontainers.image.version=${{ needs.build-test.outputs.version }}
            org.opencontainers.image.created=${{ needs.build-test.outputs.build-time }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [build-test, docker-build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: http://${{ env.DEPLOY_HOST }}:3001
    
    steps:
      - uses: actions/checkout@v4
      
      # Deploy to production server
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.DEPLOY_HOST }}
          port: ${{ env.DEPLOY_PORT }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            
            # Navigate to project directory
            cd ~/app/health || exit 1
            
            # Store current version for rollback
            CURRENT_VERSION=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{index .Config.Labels "org.opencontainers.image.version"}}' || echo "unknown")
            echo "Current version: $CURRENT_VERSION"
            
            # Pull latest image
            echo "üì• Pulling latest image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || {
              echo "‚ùå Failed to pull image"
              exit 1
            }
            
            # Backup current image for rollback
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rollback || true
            
            # Update docker-compose if needed
            if [ -f docker-compose.yml ]; then
              echo "üîÑ Updating services..."
              /usr/local/bin/docker-compose pull
              /usr/local/bin/docker-compose up -d --remove-orphans
            else
              echo "‚ùå docker-compose.yml not found!"
              exit 1
            fi
            
            # Wait for health check
            echo "‚è≥ Waiting for application to be healthy..."
            MAX_ATTEMPTS=30
            ATTEMPT=0
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              if curl -f http://localhost:3001/health > /dev/null 2>&1; then
                echo "‚úÖ Health check passed!"
                break
              fi
              ATTEMPT=$((ATTEMPT + 1))
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Waiting for health check..."
              sleep 5
            done
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå Health check failed! Rolling back..."
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rollback ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              /usr/local/bin/docker-compose up -d --force-recreate
              exit 1
            fi
            
            # Verify deployment
            NEW_VERSION=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{index .Config.Labels "org.opencontainers.image.version"}}')
            BUILD_TIME=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{index .Config.Labels "org.opencontainers.image.created"}}')
            
            echo "üéâ Deployment successful!"
            echo "üì¶ Version: $NEW_VERSION"
            echo "üïê Build Time: $BUILD_TIME"
            echo "üîó URL: http://${{ env.DEPLOY_HOST }}:3001"
            
            # Clean up old images
            docker image prune -f --filter "until=24h" || true
      
      # Verify deployment
      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          sleep 10
          
          # Check health endpoint
          HEALTH_RESPONSE=$(curl -s http://${{ env.DEPLOY_HOST }}:3001/health || echo "{}")
          echo "Health response: $HEALTH_RESPONSE"
          
          # Verify response contains expected fields
          if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
            echo "‚úÖ Deployment verified successfully!"
          else
            echo "‚ùå Deployment verification failed!"
            exit 1
          fi
      
      # Send notification
      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "Version: ${{ needs.build-test.outputs.version }}"
            echo "Build Time: ${{ needs.build-test.outputs.build-time }}"
            echo "URL: http://${{ env.DEPLOY_HOST }}:3001"
          else
            echo "‚ùå Deployment failed!"
          fi
          # Add Slack/Discord/Email notification here

  # Watchtower Auto-Deploy (Alternative)
  watchtower-notify:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Watchtower update
        run: |
          echo "üîî Watchtower will automatically detect and deploy the new image"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Watchtower polls every 30 seconds for updates"
          # Optionally trigger immediate update via webhook
          # curl -X POST http://${{ env.DEPLOY_HOST }}:8080/v1/update