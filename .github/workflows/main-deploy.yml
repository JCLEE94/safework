name: SafeWork Pro - Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: 'false'
        type: boolean

env:
  # Registry Configuration
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  
  # ArgoCD Configuration
  ARGOCD_SERVER: argo.jclee.me
  ARGOCD_APP_NAME: safework
  
  # Production URLs
  PRODUCTION_URL: https://safework.jclee.me
  
  # Test Configuration
  DATABASE_URL: postgresql://admin:password@localhost:15432/health_management
  REDIS_URL: redis://localhost:16379/0
  JWT_SECRET: test-secret-key
  PYTHONPATH: ${{ github.workspace }}
  npm_config_cache: ${{ runner.temp }}/.npm

jobs:
  test:
    name: Run Tests
    runs-on: self-hosted
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 16379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout
      
      - name: Run Python tests
        run: |
          pytest tests/ -v --cov=src --cov-report=term --timeout=300 -x
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci || echo "No frontend tests configured"
      
      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint || echo "No linting configured"

  security-scan:
    name: Security Scan
    runs-on: self-hosted
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: [test, security-scan]
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    outputs:
      image-tag: ${{ steps.metadata.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate metadata
        id: metadata
        run: |
          # Generate tags
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          DATE=$(date +'%Y%m%d')
          BUILD_TIME=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M:%S KST')
          
          # Tag strategy
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="prod-${DATE}-${SHA_SHORT}"
          else
            TAG="dev-${DATE}-${SHA_SHORT}"
          fi
          
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Generated tag: ${TAG}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY_URL }} -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
      
      - name: Build and push Docker image
        id: build
        run: |
          TAG="${{ steps.metadata.outputs.tag }}"
          BUILD_TIME="${{ steps.metadata.outputs.build_time }}"
          
          # Build with multiple tags
          docker buildx build \
            -f deployment/Dockerfile.prod \
            --platform linux/amd64 \
            --build-arg BUILD_TIME="${BUILD_TIME}" \
            --build-arg VERSION="${TAG}" \
            --build-arg COMMIT_SHA="${{ github.sha }}" \
            -t ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${TAG} \
            -t ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest \
            --push \
            --cache-from type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache \
            --cache-to type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max \
            .
          
          # Get image digest
          DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${TAG} --format "{{.Manifest.Digest}}")
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Image pushed: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${TAG}"
          echo "üì¶ Digest: ${DIGEST}"

  update-manifests:
    name: Update K8s Manifests
    runs-on: self-hosted
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update image tags in manifests
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          
          # Update backend deployment
          sed -i "s|image: registry.jclee.me/safework:.*|image: registry.jclee.me/safework:${IMAGE_TAG}|g" k8s/backend/backend-deployment.yaml
          
          # Update frontend deployment (uses same image)
          sed -i "s|image: registry.jclee.me/safework:.*|image: registry.jclee.me/safework:${IMAGE_TAG}|g" k8s/frontend/frontend-deployment.yaml
          
          # Update image pull policy to Always for production
          sed -i 's/imagePullPolicy: IfNotPresent/imagePullPolicy: Always/g' k8s/backend/backend-deployment.yaml
          sed -i 's/imagePullPolicy: IfNotPresent/imagePullPolicy: Always/g' k8s/frontend/frontend-deployment.yaml
          
          echo "‚úÖ Updated manifests with image tag: ${IMAGE_TAG}"
      
      - name: Commit and push manifest changes
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes
          if git diff --quiet; then
            echo "üìù No manifest changes needed"
          else
            # Commit and push
            git add k8s/backend/backend-deployment.yaml k8s/frontend/frontend-deployment.yaml
            git commit -m "chore: update image tags to ${IMAGE_TAG} [skip ci]"
            git push origin main
            
            echo "‚úÖ Pushed manifest updates to repository"
          fi

  notify-argocd:
    name: Notify ArgoCD
    runs-on: self-hosted
    needs: [build-and-push, update-manifests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Trigger ArgoCD sync (optional)
        run: |
          # ArgoCD will auto-sync, but we can trigger manual sync if needed
          echo "üîÑ ArgoCD will automatically detect and sync the changes"
          echo "üìç ArgoCD Dashboard: https://${{ env.ARGOCD_SERVER }}/applications/${{ env.ARGOCD_APP_NAME }}"
          echo ""
          echo "If manual sync is needed, run:"
          echo "argocd app sync ${{ env.ARGOCD_APP_NAME }} --server ${{ env.ARGOCD_SERVER }}"
      
      - name: Wait for ArgoCD sync
        run: |
          echo "‚è≥ Waiting for ArgoCD to sync (typically takes 3-5 minutes)..."
          echo "üîç Monitor at: https://${{ env.ARGOCD_SERVER }}/applications/${{ env.ARGOCD_APP_NAME }}"
          
          # Give ArgoCD time to detect changes
          sleep 30

  verify-deployment:
    name: Verify Production Deployment
    runs-on: self-hosted
    needs: notify-argocd
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Check production health
        run: |
          echo "üè• Checking production health..."
          
          # Wait for deployment to stabilize
          sleep 60
          
          # Health check
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s -o /dev/null -w "%{http_code}" ${{ env.PRODUCTION_URL }}/health | grep -q "200"; then
              echo "‚úÖ Production health check passed!"
              curl -s ${{ env.PRODUCTION_URL }}/health | jq '.' || true
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚è≥ Waiting for deployment... (attempt $RETRY_COUNT/$MAX_RETRIES)"
              sleep 30
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå Production health check failed after $MAX_RETRIES attempts"
            exit 1
          fi
      
      - name: Deployment summary
        if: always()
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "üè∑Ô∏è Image Tag: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "üì¶ Registry: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}"
          echo "üîó Production URL: ${{ env.PRODUCTION_URL }}"
          echo "üìç ArgoCD: https://${{ env.ARGOCD_SERVER }}/applications/${{ env.ARGOCD_APP_NAME }}"
          echo "üìÖ Deployed at: $(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M:%S KST')"
          echo ""
          echo "‚úÖ SafeWork Pro deployment completed successfully!"

  rollback-notification:
    name: Rollback Notification
    runs-on: self-hosted
    needs: [build-and-push, update-manifests, notify-argocd, verify-deployment]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify rollback needed
        run: |
          echo "‚ùå Deployment failed! Manual intervention may be required."
          echo ""
          echo "üîÑ To rollback in ArgoCD:"
          echo "1. Go to https://${{ env.ARGOCD_SERVER }}/applications/${{ env.ARGOCD_APP_NAME }}"
          echo "2. Click on 'History and Rollback'"
          echo "3. Select the previous successful deployment"
          echo "4. Click 'Rollback'"
          echo ""
          echo "Or use CLI:"
          echo "argocd app rollback ${{ env.ARGOCD_APP_NAME }} --server ${{ env.ARGOCD_SERVER }}"