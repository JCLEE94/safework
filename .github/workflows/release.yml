name: Release Workflow

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          echo "changelog=Initial release" >> $GITHUB_OUTPUT
        else
          # Generate changelog between tags
          CHANGELOG=$(git log $PREV_TAG..${{ steps.get_version.outputs.version }} --pretty=format:"- %s (%an)" | head -20)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Image
          ```bash
          docker pull ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
          ```
        draft: false
        prerelease: false

  build-release-image:
    name: Build Release Image
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/Dockerfile.prod
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:stable
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.create-release.outputs.version }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  create-package:
    name: Create Distribution Package
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create distribution archive
      run: |
        # Create distribution directory
        mkdir -p dist/safework-${{ needs.create-release.outputs.version }}
        
        # Copy necessary files
        cp -r src frontend deployment scripts docs README.md LICENSE requirements.txt package.json \
          dist/safework-${{ needs.create-release.outputs.version }}/
        
        # Remove unnecessary files
        find dist -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find dist -name "*.pyc" -delete 2>/dev/null || true
        find dist -name ".DS_Store" -delete 2>/dev/null || true
        
        # Create archives
        cd dist
        tar -czf safework-${{ needs.create-release.outputs.version }}.tar.gz safework-${{ needs.create-release.outputs.version }}
        zip -r safework-${{ needs.create-release.outputs.version }}.zip safework-${{ needs.create-release.outputs.version }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/safework-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: safework-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/safework-${{ needs.create-release.outputs.version }}.zip
        asset_name: safework-${{ needs.create-release.outputs.version }}.zip
        asset_content_type: application/zip

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-release-image, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update production deployment
      run: |
        # Update kustomization.yaml with release version
        sed -i "s|newTag:.*|newTag: ${{ needs.create-release.outputs.version }}|g" k8s/safework/kustomization.yaml
        
        # Commit and push
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/safework/kustomization.yaml
        git commit -m "chore: deploy release ${{ needs.create-release.outputs.version }} to production" || echo "No changes to commit"
        git push || echo "No changes to push"

    - name: Deployment notification
      run: |
        echo "üöÄ Release ${{ needs.create-release.outputs.version }} deployed to production!"
        echo "Docker image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.create-release.outputs.version }} successfully deployed!"
        # Add Slack/Discord webhook notifications here if configured

    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Release ${{ needs.create-release.outputs.version }} deployment failed!"
        # Add Slack/Discord webhook notifications here if configured