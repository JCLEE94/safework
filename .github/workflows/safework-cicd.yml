name: SafeWork Pro GitOps Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ${{ vars.REGISTRY_URL }}
  IMAGE_NAME: ${{ vars.GITHUB_ORG }}/${{ vars.APP_NAME }}
  HELM_CHART_NAME: ${{ vars.APP_NAME }}
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 병렬 실행 그룹 1: 코드 품질 및 보안 검사
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Code formatting check (Black)
        run: black --check src/ tests/ || (echo "❌ Code formatting issues found. Run: black src/ tests/" && exit 1)

      - name: Import sorting check (isort)  
        run: isort --check-only src/ tests/ || (echo "❌ Import sorting issues found. Run: isort src/ tests/" && exit 1)

      - name: Linting (Flake8)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Security scan (Bandit)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "🔍 Security scan completed. Check report for issues."
          fi

      - name: Dependency vulnerability check
        run: |
          safety check --json --output safety-report.json || true
          echo "🛡️ Dependency security scan completed."

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # 병렬 실행 그룹 2: 백엔드 테스트
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-testing-only
          ENVIRONMENT: test
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "🧪 Running unit tests..."
          pytest tests/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --timeout=60 \
            -x \
            --maxfail=5 \
            -m "not slow and not integration"

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-testing-only
          ENVIRONMENT: test
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "🔗 Running integration tests..."
          pytest tests/ -v \
            --timeout=120 \
            -x \
            --maxfail=3 \
            -m "integration"

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  # 병렬 실행 그룹 3: 프론트엔드 빌드 및 테스트
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          npm ci

      - name: TypeScript check
        run: |
          echo "🔍 Running TypeScript checks..."
          npm run type-check

      - name: ESLint check
        run: |
          echo "🔍 Running ESLint..."
          npm run lint

      - name: Frontend tests
        run: |
          echo "🧪 Running frontend tests..."
          npm run test -- --run --coverage

      - name: Build frontend
        run: |
          echo "🏗️ Building frontend for production..."
          npm run build
          echo "✅ Frontend build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # Docker 이미지 빌드 (모든 테스트 통과 후)
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-build]
    if: github.event_name != 'pull_request'
    timeout-minutes: 30
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=prod-{{date 'YYYYMMDD'}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

      - name: Image vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Image build success
        run: |
          echo "✅ Docker image built and pushed successfully"
          echo "🏷️ Image tags: ${{ steps.meta.outputs.tags }}"
          echo "🔍 Image digest: ${{ steps.build.outputs.digest }}"

  # Helm 차트 패키징 및 배포 (버전 태그 시)
  helm-deploy:
    name: Helm Chart Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Prepare Chart metadata
        id: chart-info
        run: |
          CHART_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          IMAGE_TAG="prod-$(date +'%Y%m%d')-$(echo ${{ github.sha }} | cut -c1-7)"
          
          echo "chart-version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          echo "📋 Chart Version: ${CHART_VERSION}"
          echo "🏷️ Image Tag: ${IMAGE_TAG}"

      - name: Update Chart version and appVersion
        run: |
          cd k8s/helm/${{ env.HELM_CHART_NAME }}
          
          # Update Chart.yaml
          sed -i "s/^version:.*/version: ${{ steps.chart-info.outputs.chart-version }}/" Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.chart-info.outputs.chart-version }}\"/" Chart.yaml
          
          # Update values.yaml with new image tag
          sed -i "s|tag:.*|tag: \"${{ steps.chart-info.outputs.image-tag }}\"|" values.yaml
          
          echo "✅ Chart metadata updated"

      - name: Package Helm chart
        run: |
          cd k8s/helm
          helm package ${{ env.HELM_CHART_NAME }}/
          
          CHART_FILE="${{ env.HELM_CHART_NAME }}-${{ steps.chart-info.outputs.chart-version }}.tgz"
          if [ -f "$CHART_FILE" ]; then
            echo "✅ Chart packaged successfully: $CHART_FILE"
          else
            echo "❌ Chart packaging failed"
            exit 1
          fi

      - name: Push to ChartMuseum
        run: |
          cd k8s/helm
          CHART_FILE="${{ env.HELM_CHART_NAME }}-${{ steps.chart-info.outputs.chart-version }}.tgz"
          
          echo "📤 Pushing chart to ChartMuseum..."
          response=$(curl -s -w "%{http_code}" \
            -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            --data-binary "@$CHART_FILE" \
            ${{ vars.CHARTMUSEUM_URL }}/api/charts)
          
          http_code="${response: -3}"
          if [ "$http_code" -eq 201 ]; then
            echo "✅ Chart uploaded successfully to ChartMuseum"
          else
            echo "❌ Chart upload failed with HTTP code: $http_code"
            exit 1
          fi

      - name: ArgoCD notification
        run: |
          echo "🚀 Chart published to ChartMuseum successfully!"
          echo "📊 ArgoCD will detect and sync automatically"
          echo "🔗 Monitor deployment: ${{ vars.ARGOCD_URL }}/applications/${{ env.HELM_CHART_NAME }}"
          echo "🌐 Production URL: https://${{ env.HELM_CHART_NAME }}.jclee.me"

  # 배포 상태 알림 및 검증
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, helm-deploy]
    if: always() && github.event_name != 'pull_request'
    timeout-minutes: 5
    
    steps:
      - name: Deployment summary
        run: |
          echo "📊 SafeWork Pro CI/CD Pipeline Summary"
          echo "====================================="
          echo ""
          
          if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "✅ Docker Image: BUILD SUCCESS"
            echo "   🏷️  Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            echo "   📊  Registry: ${{ env.REGISTRY }}"
          else
            echo "❌ Docker Image: BUILD FAILED"
          fi
          
          if [[ "${{ needs.helm-deploy.result }}" == "success" ]]; then
            echo "✅ Helm Chart: DEPLOY SUCCESS"
            echo "   📦  Chart: ${{ env.HELM_CHART_NAME }}"
            echo "   🔗  ArgoCD: ${{ vars.ARGOCD_URL }}/applications/${{ env.HELM_CHART_NAME }}"
          elif [[ "${{ needs.helm-deploy.result }}" == "skipped" ]]; then
            echo "⏭️ Helm Chart: SKIPPED (no version tag)"
          else
            echo "❌ Helm Chart: DEPLOY FAILED"
          fi
          
          echo ""
          echo "🔗 Important URLs:"
          echo "   📊 Production: https://${{ env.HELM_CHART_NAME }}.jclee.me"
          echo "   🚀 ArgoCD UI: ${{ vars.ARGOCD_URL }}"
          echo "   📦 Registry: https://${{ env.REGISTRY }}"
          echo "   📈 Charts: ${{ vars.CHARTMUSEUM_URL }}"
          echo ""
          echo "🔧 Quick debugging commands:"
          echo "   kubectl get pods -n production"
          echo "   kubectl logs -f deployment/${{ env.HELM_CHART_NAME }} -n production"
          echo "   docker logs ${{ env.HELM_CHART_NAME }} --tail=50"

      - name: Slack notification
        if: always()
        run: |
          # Placeholder for Slack notification
          echo "💬 Send notification to Slack (implement as needed)"
          
          OVERALL_STATUS="success"
          if [[ "${{ needs.build-and-push.result }}" != "success" ]] || [[ "${{ needs.helm-deploy.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
          fi
          
          echo "📱 Pipeline Status: $OVERALL_STATUS"
          echo "🔔 Notification sent (placeholder)"