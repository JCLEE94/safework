name: CI/CD Pipeline Integration Tests

on:
  pull_request:
    paths:
      - '.github/workflows/**'
      - '.github/scripts/**'
      - 'tests/cicd/**'
  workflow_dispatch:
    inputs:
      test_deployment:
        description: 'Test deployment verification'
        required: false
        default: true
        type: boolean
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DEPLOYMENT_URL: https://safework.jclee.me
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  DOCKER_BUILDKIT: 1

jobs:
  validate-workflows:
    name: Validate Workflow Syntax
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install pyyaml requests
      
      - name: Run workflow validation tests
        run: |
          python tests/cicd/test_pipeline_integration.py --doctest
          python -c "
          from tests.cicd.test_pipeline_integration import PipelineIntegrationTest
          test = PipelineIntegrationTest()
          assert test.test_workflow_syntax_validation()
          "
  
  test-service-containers:
    name: Test Service Containers
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make scripts executable
        run: chmod +x .github/scripts/*.sh
      
      - name: Test PostgreSQL container
        run: |
          python -c "
          from tests.cicd.test_pipeline_integration import PipelineIntegrationTest
          test = PipelineIntegrationTest()
          assert test.test_service_container_startup(test.POSTGRES_CONTAINER)
          "
      
      - name: Test Redis container
        run: |
          python -c "
          from tests.cicd.test_pipeline_integration import PipelineIntegrationTest
          test = PipelineIntegrationTest()
          assert test.test_service_container_startup(test.REDIS_CONTAINER)
          "
  
  test-build-process:
    name: Test Docker Build Process
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test Docker build
        run: |
          python -c "
          from tests.cicd.test_pipeline_integration import PipelineIntegrationTest
          test = PipelineIntegrationTest()
          assert test.test_docker_build_process()
          "
      
      - name: Test registry connectivity
        run: |
          python -c "
          from tests.cicd.test_pipeline_integration import PipelineIntegrationTest
          test = PipelineIntegrationTest()
          assert test.test_registry_connectivity()
          "
  
  test-claude-integration:
    name: Test Claude Code Integration
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make scripts executable
        run: chmod +x .github/scripts/*.sh
      
      - name: Test Claude installation script
        run: |
          echo "üß™ Testing Claude installation script..."
          .github/scripts/install-claude.sh
      
      - name: Test OAuth check script
        id: oauth_test
        continue-on-error: true
        run: |
          echo "üß™ Testing OAuth check script..."
          .github/scripts/check-oauth.sh || echo "OAuth not configured (expected in test)"
  
  test-deployment-verification:
    name: Test Deployment Verification
    runs-on: [self-hosted, linux]
    if: inputs.test_deployment || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq curl
      
      - name: Make scripts executable
        run: chmod +x .github/scripts/*.sh
      
      - name: Run deployment verification
        run: |
          echo "üß™ Testing deployment verification script..."
          .github/scripts/verify-deployment.sh
  
  integration-test-summary:
    name: Integration Test Summary
    runs-on: [self-hosted, linux]
    needs:
      - validate-workflows
      - test-service-containers
      - test-build-process
      - test-claude-integration
      - test-deployment-verification
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate test report
        run: |
          echo "üìä CI/CD Integration Test Report"
          echo "================================"
          echo ""
          echo "‚úÖ Workflow Validation: ${{ needs.validate-workflows.result }}"
          echo "‚úÖ Service Containers: ${{ needs.test-service-containers.result }}"
          echo "‚úÖ Build Process: ${{ needs.test-build-process.result }}"
          echo "‚úÖ Claude Integration: ${{ needs.test-claude-integration.result }}"
          echo "‚úÖ Deployment Verification: ${{ needs.test-deployment-verification.result }}"
          echo ""
          
          # Check overall status
          if [[ "${{ needs.validate-workflows.result }}" == "success" ]] && \
             [[ "${{ needs.test-service-containers.result }}" == "success" ]] && \
             [[ "${{ needs.test-build-process.result }}" == "success" ]]; then
            echo "üéâ Core pipeline tests passed!"
          else
            echo "‚ùå Some pipeline tests failed"
            exit 1
          fi
      
      - name: Create issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `CI/CD Pipeline Integration Test Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## CI/CD Pipeline Integration Test Failed
            
            **Workflow Run**: ${context.runId}
            **Triggered by**: ${context.eventName}
            
            ### Test Results:
            - Workflow Validation: ${{ needs.validate-workflows.result }}
            - Service Containers: ${{ needs.test-service-containers.result }}
            - Build Process: ${{ needs.test-build-process.result }}
            - Claude Integration: ${{ needs.test-claude-integration.result }}
            - Deployment Verification: ${{ needs.test-deployment-verification.result }}
            
            Please investigate and fix the failing tests.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'ci/cd', 'automated']
            });