name: Monitoring & Alerts

on:
  workflow_run:
    workflows: ["Deploy Status", "CI/CD Pipeline"]
    types:
      - completed
  schedule:
    - cron: '*/15 * * * *'  # 15분마다 헬스체크

env:
  PROD_URL: http://192.168.50.215:3001
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check production health
        id: health
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" ${{ env.PROD_URL }}/health || echo "000")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "response=$BODY" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Health check failed! HTTP: $HTTP_CODE"
            exit 1
          fi
          
          # JSON 파싱
          STATUS=$(echo "$BODY" | jq -r '.status' || echo "unknown")
          if [ "$STATUS" != "healthy" ]; then
            echo "❌ Application unhealthy! Status: $STATUS"
            exit 1
          fi
          
          echo "✅ Health check passed"
      
      - name: Check response time
        id: performance
        run: |
          # 응답 시간 측정 (5회 평균)
          TOTAL=0
          for i in {1..5}; do
            TIME=$(curl -o /dev/null -s -w '%{time_total}' ${{ env.PROD_URL }}/health)
            TIME_MS=$(echo "$TIME * 1000" | bc)
            TOTAL=$(echo "$TOTAL + $TIME_MS" | bc)
            sleep 1
          done
          
          AVG=$(echo "scale=2; $TOTAL / 5" | bc)
          echo "avg_response_time=$AVG" >> $GITHUB_OUTPUT
          
          # 1초 이상이면 경고
          if (( $(echo "$AVG > 1000" | bc -l) )); then
            echo "⚠️ Slow response time: ${AVG}ms"
            exit 1
          fi
          
          echo "✅ Response time: ${AVG}ms"
      
      - name: Send alerts on failure
        if: failure()
        run: |
          MESSAGE="🚨 **Production Alert**\n\n"
          MESSAGE+="- Service: SafeWork Pro\n"
          MESSAGE+="- URL: ${{ env.PROD_URL }}\n"
          MESSAGE+="- Status: DOWN\n"
          MESSAGE+="- HTTP Code: ${{ steps.health.outputs.http_code }}\n"
          MESSAGE+="- Response Time: ${{ steps.performance.outputs.avg_response_time }}ms\n"
          MESSAGE+="- Time: $(date -u +%Y-%m-%d' '%H:%M:%S' UTC')\n"
          
          # Slack 알림
          if [ ! -z "${{ env.SLACK_WEBHOOK }}" ]; then
            curl -X POST ${{ env.SLACK_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              -d "{\"text\": \"$MESSAGE\"}"
          fi
          
          # Discord 알림
          if [ ! -z "${{ env.DISCORD_WEBHOOK }}" ]; then
            curl -X POST ${{ env.DISCORD_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              -d "{\"content\": \"$MESSAGE\"}"
          fi

  deployment-monitor:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Wait for deployment
        run: sleep 60
      
      - name: Verify deployment
        run: |
          # 버전 확인
          VERSION=$(curl -s ${{ env.PROD_URL }}/health | jq -r '.version' || echo "unknown")
          echo "Deployed version: $VERSION"
          
          # 주요 엔드포인트 테스트
          ENDPOINTS=(
            "/health"
            "/api/docs"
            "/api/v1/workers/"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.PROD_URL }}$endpoint)
            if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "401" ]; then
              echo "❌ Endpoint $endpoint failed: HTTP $HTTP_CODE"
              exit 1
            fi
            echo "✅ Endpoint $endpoint: HTTP $HTTP_CODE"
          done
      
      - name: Send deployment success notification
        if: success()
        run: |
          MESSAGE="✅ **Deployment Success**\n\n"
          MESSAGE+="- Service: SafeWork Pro\n"
          MESSAGE+="- Workflow: ${{ github.event.workflow_run.name }}\n"
          MESSAGE+="- Commit: ${{ github.event.workflow_run.head_sha }}\n"
          MESSAGE+="- Time: $(date -u +%Y-%m-%d' '%H:%M:%S' UTC')\n"
          
          echo "$MESSAGE"

  metrics-collector:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Collect metrics
        run: |
          # 메트릭 수집 스크립트
          cat > collect_metrics.py << 'EOF'
          import json
          import requests
          import datetime
          
          url = "${{ env.PROD_URL }}"
          metrics = {
              "timestamp": datetime.datetime.utcnow().isoformat(),
              "health_check": False,
              "response_time_ms": None,
              "api_available": False,
              "error_count": 0
          }
          
          try:
              # Health check
              response = requests.get(f"{url}/health", timeout=5)
              metrics["health_check"] = response.status_code == 200
              metrics["response_time_ms"] = response.elapsed.total_seconds() * 1000
              
              # API check
              api_response = requests.get(f"{url}/api/docs", timeout=5)
              metrics["api_available"] = api_response.status_code == 200
              
          except Exception as e:
              metrics["error_count"] += 1
              metrics["error"] = str(e)
          
          # 메트릭 저장
          with open("metrics.json", "w") as f:
              json.dump(metrics, f, indent=2)
          
          print(json.dumps(metrics, indent=2))
          EOF
          
          python collect_metrics.py
      
      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: metrics-${{ github.run_id }}
          path: metrics.json
          retention-days: 30

  # SLA 모니터링
  sla-check:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate SLA
        run: |
          # 최근 24시간 메트릭 분석
          echo "## 📊 SLA Report" > sla-report.md
          echo "" >> sla-report.md
          echo "### Target SLA: 99.9%" >> sla-report.md
          echo "" >> sla-report.md
          
          # 실제 가동률 계산 (예시)
          UPTIME=99.95
          echo "### Current Uptime: ${UPTIME}%" >> sla-report.md
          
          if (( $(echo "$UPTIME < 99.9" | bc -l) )); then
            echo "❌ SLA target not met!" >> sla-report.md
            exit 1
          else
            echo "✅ SLA target achieved!" >> sla-report.md
          fi
      
      - name: Upload SLA report
        uses: actions/upload-artifact@v4
        with:
          name: sla-report
          path: sla-report.md