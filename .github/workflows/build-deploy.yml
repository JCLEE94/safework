name: Build and Deploy SafeWork Pro

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: safework
  
jobs:
  test:
    name: Run Tests
    runs-on: [self-hosted, linux]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        env:
          npm_config_cache: ${{ runner.temp }}/.npm
        working-directory: frontend
        run: npm ci
        
      - name: Run frontend tests
        working-directory: frontend
        run: npm test
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r backend/requirements.txt
          python -m pip install pytest pytest-cov pytest-timeout
          
      - name: Run backend tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-fail-under=70 --timeout=300 -x
          
  build:
    name: Build Docker Image
    runs-on: [self-hosted, linux]
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployment/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

  notify:
    name: Deployment Notification
    runs-on: [self-hosted, linux]
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      deployments: write
      contents: read
    
    steps:
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.ref,
                environment: 'production',
                description: 'Watchtower auto-deployment',
                auto_merge: false,
                required_contexts: []
              });
              
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: 'success',
                description: 'Image pushed to registry - Watchtower will deploy',
                environment_url: 'http://192.168.50.215:3001'
              });
              
              console.log('Deployment notification created successfully');
            } catch (error) {
              console.log('Failed to create deployment notification:', error.message);
              // Don't fail the workflow if notification fails
            }

      - name: Pipeline Success Notification
        if: success()
        run: |
          echo "‚úÖ Pipeline completed successfully"
          echo "üì¶ Image pushed to registry.jclee.me/safework:latest"
          echo "üöÄ Watchtower will deploy automatically"
      
      - name: Trigger Watchtower update via Webhook
        if: success()
        run: |
          curl -X POST https://watchtower.jclee.me/v1/update \
          -H "Authorization: Bearer MySuperSecretToken12345"

  failure-notification:
    name: Pipeline Failure Notification
    runs-on: [self-hosted, linux]
    needs: [test, build]
    if: failure()
    
    steps:
      - name: Identify failure point
        run: |
          if [ "${{ needs.test.result }}" = "failure" ]; then
            echo "‚ùå Pipeline failed at TESTING stage"
            echo "FAILURE_STAGE=test" >> $GITHUB_ENV
            echo "FAILURE_MESSAGE=Tests failed - code quality issues detected" >> $GITHUB_ENV
          elif [ "${{ needs.build.result }}" = "failure" ]; then
            echo "‚ùå Pipeline failed at BUILD stage"
            echo "FAILURE_STAGE=build" >> $GITHUB_ENV
            echo "FAILURE_MESSAGE=Docker build failed - check Dockerfile and dependencies" >> $GITHUB_ENV
          else
            echo "‚ùå Pipeline failed at unknown stage"
            echo "FAILURE_STAGE=unknown" >> $GITHUB_ENV
            echo "FAILURE_MESSAGE=Unknown failure - check workflow logs" >> $GITHUB_ENV
          fi

      - name: Send failure notification
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "‚ùå SafeWork Pro Pipeline Failed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Repository", "value": "${{ github.repository }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Failed Stage", "value": "${{ env.FAILURE_STAGE }}", "short": true},
                  {"title": "Message", "value": "${{ env.FAILURE_MESSAGE }}", "short": false}
                ],
                "actions": [{
                  "type": "button",
                  "text": "View Logs",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }' || echo "Failed to send Slack notification"