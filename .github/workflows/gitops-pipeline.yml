name: GitOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (deploy only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  DOCKER_BUILDKIT: 1
  ARGOCD_SERVER: argo.jclee.me
  ARGOCD_APP: safework

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        echo "DATABASE_URL=postgresql://admin:password@localhost:5432/health_management" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
        echo "ENVIRONMENT=development" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --timeout=60 -x --maxfail=5

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:scan -f deployment/Dockerfile.prod .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped') && 
      (needs.security.result == 'success' || needs.security.result == 'skipped') && 
      github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate image metadata
      id: meta
      run: |
        DATE=$(date +%Y%m%d)
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        BUILD_NUMBER=${{ github.run_number }}
        
        echo "date_tag=prod-${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "semantic_tag=1.${DATE}.${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "latest_tag=latest" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/Dockerfile.prod
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.date_tag }}
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.semantic_tag }}
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }}
        cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:cache
        cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:cache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: Sync ArgoCD Application
      env:
        ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
      run: |
        # ArgoCD sync with new image
        argocd app sync ${{ env.ARGOCD_APP }} \
          --server ${{ env.ARGOCD_SERVER }} \
          --grpc-web \
          --insecure \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} || echo "Sync failed, relying on auto-sync"
        
        # Wait for sync to complete
        argocd app wait ${{ env.ARGOCD_APP }} \
          --server ${{ env.ARGOCD_SERVER }} \
          --grpc-web \
          --insecure \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} \
          --timeout 300 || echo "Wait timeout, checking status..."
        
        # Get final status
        argocd app get ${{ env.ARGOCD_APP }} \
          --server ${{ env.ARGOCD_SERVER }} \
          --grpc-web \
          --insecure \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }}

    - name: Create deployment summary
      if: success()
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.date_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ArgoCD**: [View Application](https://${{ env.ARGOCD_SERVER }}/applications/${{ env.ARGOCD_APP }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Production**: [https://safework.jclee.me](https://safework.jclee.me)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
    - name: Send notification
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "Deployment failed for commit ${{ github.sha }}"
        # Add notification logic here (Slack, Email, etc.)