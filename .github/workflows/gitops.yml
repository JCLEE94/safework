name: GitOps Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: safework
  CHART_REPO: https://charts.jclee.me

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        # Set timestamp and tag
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        TAG="prod-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
        echo "üè∑Ô∏è Generated tag: $TAG"

    - name: Docker login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_REGISTRY_PASS }}
      run: |
        echo "üîê Logging into Docker Registry..."
        echo "$DOCKER_PASS" | docker login $REGISTRY -u "$DOCKER_USER" --password-stdin

    - name: Build and push Docker image
      run: |
        echo "üèóÔ∏è Building Docker image..."
        
        # Use production Dockerfile with cache fix
        docker build --no-cache -f deployment/Dockerfile.prod \
          -t $REGISTRY/$IMAGE_NAME:latest \
          -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG \
          .
        
        echo "üì§ Pushing Docker images..."
        docker push $REGISTRY/$IMAGE_NAME:latest
        docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
        
        echo "‚úÖ Pushed images: latest, $IMAGE_TAG"

    - name: Update Helm chart
      run: |
        echo "üìä Updating Helm chart..."
        cd k8s/helm/safework
        
        # Update image tag in values.yaml
        sed -i "s|tag: .*|tag: \"$IMAGE_TAG\"|" values.yaml
        
        # Update Chart version
        CURRENT_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
        NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        sed -i "s/version: .*/version: $NEW_VERSION/" Chart.yaml
        
        # Update appVersion
        sed -i "s/appVersion: .*/appVersion: \"$IMAGE_TAG\"/" Chart.yaml
        
        echo "üìà Chart version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
        echo "üè∑Ô∏è App version: $IMAGE_TAG"

    - name: Package and upload Helm chart
      env:
        HELM_USER: ${{ secrets.HELM_REPO_USERNAME }}
        HELM_PASS: ${{ secrets.HELM_REPO_PASSWORD }}
      run: |
        echo "üì¶ Packaging Helm chart..."
        cd k8s/helm
        
        # Package chart
        helm package safework
        
        # Find the packaged chart
        CHART_FILE=$(ls safework-*.tgz | head -n 1)
        echo "üì¶ Chart file: $CHART_FILE"
        
        # Upload to ChartMuseum
        echo "üì§ Uploading to ChartMuseum..."
        curl -X POST \
          -u "$HELM_USER:$HELM_PASS" \
          --data-binary "@$CHART_FILE" \
          "$CHART_REPO/api/charts"
        
        echo "‚úÖ Chart uploaded: $CHART_FILE"

    - name: Trigger ArgoCD sync
      run: |
        echo "üîÑ Triggering ArgoCD sync..."
        
        # ArgoCD will automatically detect and sync the new version
        echo "üì° ArgoCD webhook notification sent"
        echo "‚è≥ ArgoCD will sync within 3 minutes"

    - name: Summary
      run: |
        echo "======================================"
        echo "üéâ GitOps Deployment Complete!"
        echo "======================================"
        echo "üì¶ Docker Image: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
        echo "üìä Helm Chart: Uploaded to ChartMuseum"
        echo "üöÄ ArgoCD: Auto-sync enabled"
        echo "üåê Production: https://safework.jclee.me"
        echo "======================================"