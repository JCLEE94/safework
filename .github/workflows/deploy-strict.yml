name: Strict Deploy Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: health-management-system
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # 엄격한 테스트
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      # Python 설정
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx flake8 mypy black
      
      # 코드 품질 검사
      - name: Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Format check with black
        run: |
          black --check src/
        continue-on-error: true
      
      # 테스트 실행 (실패 시 중단)
      - name: Run all tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/health_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret
        run: |
          mkdir -p logs
          pytest tests/ -v --tb=short --strict-markers --cov=src --cov-fail-under=50
      
      # Import 검증
      - name: Test imports
        run: |
          python -c "from src.app import create_app; print('✅ App import successful')"
          python -c "import src.models; print('✅ Models import successful')"
          python -c "import src.handlers; print('✅ Handlers import successful')"

  # 빌드 및 배포
  build-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      # Frontend 빌드
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Build frontend
        run: |
          npm ci
          npm run build
      
      # Docker 빌드
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      # 이미지 빌드 전 테스트
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
      
      # 컨테이너 테스트
      - name: Test container
        run: |
          # 테스트 네트워크 생성
          docker network create test-net
          
          # PostgreSQL 시작
          docker run -d --name test-postgres \
            --network test-net \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=health_test \
            postgres:15
          
          # Redis 시작
          docker run -d --name test-redis \
            --network test-net \
            redis:7
          
          # 앱 시작
          docker run -d --name test-app \
            --network test-net \
            -p 8000:8000 \
            -e DATABASE_URL=postgresql://postgres:password@test-postgres:5432/health_test \
            -e REDIS_URL=redis://test-redis:6379/0 \
            ${{ env.IMAGE_NAME }}:test
          
          # 헬스체크 대기
          echo "Waiting for app to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health; then
              echo "✅ Health check passed!"
              break
            fi
            echo "Attempt $i/30..."
            sleep 2
          done
          
          # 로그 확인
          docker logs test-app
          
          # 최종 확인
          curl -f http://localhost:8000/health || exit 1
          
          # 정리
          docker stop test-app test-postgres test-redis
          docker rm test-app test-postgres test-redis
          docker network rm test-net
      
      # 프로덕션 이미지 푸시
      - name: Push to registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
      
      # 배포 확인
      - name: Deployment notification
        run: |
          echo "✅ 모든 테스트 통과!"
          echo "✅ 이미지 푸시 완료!"
          echo "🚀 Watchtower가 자동 배포를 시작합니다."