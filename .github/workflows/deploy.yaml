name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ${{ vars.REGISTRY_URL || 'registry.jclee.me' }}
  IMAGE_NAME: ${{ vars.APP_NAME || 'safework' }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install additional test dependencies if not in requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout coverage
      
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key
          PYTHONPATH: ${{ github.workspace }}
          ENVIRONMENT: development
        run: |
          echo "🧪 Running backend tests..."
          pytest tests/ -v --cov=src --cov-report=term --timeout=60 -x --maxfail=5
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: frontend
        run: |
          echo "🏗️ Building frontend..."
          npm run build
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            htmlcov/
            frontend/dist/

  deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.tag }}
      chart-version: ${{ steps.generate-tag.outputs.chart }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate tags and versions
        id: generate-tag
        run: |
          # Generate image tag
          IMAGE_TAG="prod-$(date +%Y%m%d)-$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          # Generate chart version
          CHART_VERSION="1.$(date +%Y%m%d).${{ github.run_number }}"
          echo "chart=${CHART_VERSION}" >> $GITHUB_OUTPUT
          
          echo "📦 Image tag: ${IMAGE_TAG}"
          echo "📊 Chart version: ${CHART_VERSION}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.generate-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      
      - name: Update Helm chart
        run: |
          # Update chart version
          sed -i "s/^version:.*/version: ${{ steps.generate-tag.outputs.chart }}/" ./charts/safework/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.generate-tag.outputs.tag }}\"/" ./charts/safework/Chart.yaml
          
          # Add ArgoCD Image Updater annotations if not present
          if ! grep -q "argocdImageUpdater:" ./charts/safework/values.yaml; then
            echo "" >> ./charts/safework/values.yaml
            echo "# ArgoCD Image Updater Configuration" >> ./charts/safework/values.yaml
            echo "argocdImageUpdater:" >> ./charts/safework/values.yaml
            echo "  enabled: true" >> ./charts/safework/values.yaml
          fi
      
      - name: Package and push Helm chart
        run: |
          # Install helm-push plugin
          helm plugin install https://github.com/chartmuseum/helm-push || true
          
          # Add ChartMuseum repo
          helm repo add charts ${{ vars.CHARTMUSEUM_URL || 'https://charts.jclee.me' }} \
            --username ${{ secrets.CHARTMUSEUM_USERNAME }} \
            --password ${{ secrets.CHARTMUSEUM_PASSWORD }}
          helm repo update
          
          # Package chart
          helm package ./charts/safework
          
          # Push to ChartMuseum
          helm cm-push safework-${{ steps.generate-tag.outputs.chart }}.tgz charts
          
          echo "✅ Helm chart pushed successfully"
      
      - name: Update ArgoCD application
        run: |
          # Ensure k8s/argocd directory exists
          mkdir -p k8s/argocd
          
          # Create ArgoCD application manifest
          cat > k8s/argocd/safework-application.yaml << 'ARGOCD_EOF'
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ env.IMAGE_NAME }}
            namespace: argocd
            annotations:
              argocd-image-updater.argoproj.io/image-list: "safework=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
              argocd-image-updater.argoproj.io/safework.update-strategy: "latest"
              argocd-image-updater.argoproj.io/safework.allow-tags: "regexp:^prod-[0-9]{8}-[a-f0-9]{7}$"
              argocd-image-updater.argoproj.io/write-back-method: "git"
              argocd-image-updater.argoproj.io/git-branch: "main"
          spec:
            project: default
            source:
              repoURL: ${{ vars.CHARTMUSEUM_URL || 'https://charts.jclee.me' }}
              chart: ${{ env.IMAGE_NAME }}
              targetRevision: "${{ steps.generate-tag.outputs.chart }}"
              helm:
                values: |
                  image:
                    repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                    tag: "${{ steps.generate-tag.outputs.tag }}"
                    pullPolicy: Always
                  imagePullSecrets:
                    - name: harbor-registry
                  service:
                    type: NodePort
                    port: 3001
                    targetPort: 3001
                    nodePort: 32301
            destination:
              server: https://kubernetes.default.svc
              namespace: ${{ vars.NAMESPACE || 'safework' }}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
              - PruneLast=true
            revisionHistoryLimit: 10
          ARGOCD_EOF
      
      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Deployment Summary
          
          ## 📦 Docker Image
          - **Registry**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`
          - **Tags**: 
            - \`latest\`
            - \`${{ steps.generate-tag.outputs.tag }}\`
          
          ## 📊 Helm Chart
          - **Version**: \`${{ steps.generate-tag.outputs.chart }}\`
          - **Repository**: ${{ vars.CHARTMUSEUM_URL || 'https://charts.jclee.me' }}
          
          ## 🔄 ArgoCD
          - **Application**: ${{ env.IMAGE_NAME }}
          - **Auto-Sync**: Enabled
          - **Image Updater**: Configured
          
          ## 📝 Next Steps
          ArgoCD Image Updater will automatically detect and deploy the new image within 2-3 minutes.
          
          ## 🔗 Links
          - [ArgoCD Dashboard](${{ vars.ARGOCD_URL || 'https://argo.jclee.me' }}/applications/${{ env.IMAGE_NAME }})
          - [Production](https://safework.jclee.me)
          - [Harbor Registry](${{ env.REGISTRY }}/harbor/projects/1/repositories/${{ env.IMAGE_NAME }})
          EOF
      
      - name: Notify deployment status
        run: |
          echo "✅ Deployment pipeline completed successfully!"
          echo "🔄 ArgoCD will automatically sync the new image."
          echo "📊 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.generate-tag.outputs.tag }}"
          echo "📈 Chart: ${{ steps.generate-tag.outputs.chart }}"