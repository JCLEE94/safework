name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Run weekly on Monday at 6 AM UTC

jobs:
  # Python code quality
  python-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install -r requirements.txt
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ tests/
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Linting (Flake8)
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Type checking (MyPy)
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Security scan (Bandit)
      run: |
        bandit -r src/ -ll -f json -o bandit-report.json
        bandit -r src/ -ll
    
    - name: Dependency security check (Safety)
      run: |
        safety check --json --output safety-report.json
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports
        path: |
          bandit-report.json
          safety-report.json

  # JavaScript/TypeScript code quality
  javascript-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Linting (ESLint)
      run: npm run lint
    
    - name: Type checking (TypeScript)
      run: npm run type-check
    
    - name: Code formatting check (Prettier)
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,scss,html,json}"
    
    - name: Dependency audit
      run: npm audit --audit-level moderate
    
    - name: Check for outdated packages
      run: npm outdated || true

  # Docker image security scan
  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t health-app:test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'health-app:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'health-app:test'
        format: 'table'

  # SQL injection and XSS testing
  security-testing:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run security tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/health_test
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
      run: |
        python -m pytest tests/test_security.py -v --tb=short

  # Code complexity analysis
  complexity-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon
    
    - name: Cyclomatic complexity check
      run: |
        echo "## Cyclomatic Complexity Report" >> complexity-report.md
        echo "### High complexity functions (CC > 10)" >> complexity-report.md
        radon cc src/ -s -a >> complexity-report.md
        
        echo "### Maintainability Index" >> complexity-report.md
        radon mi src/ -s >> complexity-report.md
        
        # Fail if there are functions with very high complexity
        xenon --max-absolute B --max-modules A --max-average A src/
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-report
        path: complexity-report.md

  # Performance analysis
  performance-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx pytest-benchmark
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run performance tests
      env:
        RUN_PERFORMANCE_TESTS: "true"
        DATABASE_URL: sqlite+aiosqlite:///:memory:
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
      run: |
        python -m pytest tests/test_performance.py -v --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmarks
        path: benchmark.json

  # Documentation check
  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for documentation files
      run: |
        echo "Checking for required documentation..."
        
        # Check for README
        if [ ! -f "README.md" ]; then
          echo "❌ README.md is missing"
          exit 1
        fi
        
        # Check for API documentation
        if [ ! -f "API.md" ] && [ ! -d "docs/api" ]; then
          echo "⚠️ API documentation might be missing"
        fi
        
        # Check for CHANGELOG
        if [ ! -f "CHANGELOG.md" ]; then
          echo "⚠️ CHANGELOG.md is missing"
        fi
        
        echo "✅ Documentation check completed"
    
    - name: Check Python docstrings
      run: |
        python -c "
        import ast
        import os
        
        missing_docstrings = []
        
        for root, dirs, files in os.walk('src'):
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        try:
                            tree = ast.parse(f.read())
                            for node in ast.walk(tree):
                                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                                    if not ast.get_docstring(node):
                                        missing_docstrings.append(f'{filepath}:{node.lineno}:{node.name}')
                        except:
                            pass
        
        if missing_docstrings:
            print('Missing docstrings:')
            for item in missing_docstrings[:20]:  # Limit output
                print(f'  {item}')
            if len(missing_docstrings) > 20:
                print(f'  ... and {len(missing_docstrings) - 20} more')
        else:
            print('✅ All functions and classes have docstrings')
        "

  # Collect and report results
  quality-summary:
    runs-on: ubuntu-latest
    needs: [python-quality, javascript-quality, docker-security, security-testing, complexity-analysis]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create quality summary
      run: |
        echo "# Code Quality Summary" > quality-summary.md
        echo "Date: $(date)" >> quality-summary.md
        echo "" >> quality-summary.md
        
        echo "## Test Results" >> quality-summary.md
        echo "- Python Quality: ${{ needs.python-quality.result }}" >> quality-summary.md
        echo "- JavaScript Quality: ${{ needs.javascript-quality.result }}" >> quality-summary.md
        echo "- Docker Security: ${{ needs.docker-security.result }}" >> quality-summary.md
        echo "- Security Testing: ${{ needs.security-testing.result }}" >> quality-summary.md
        echo "- Complexity Analysis: ${{ needs.complexity-analysis.result }}" >> quality-summary.md
        echo "" >> quality-summary.md
        
        echo "## Recommendations" >> quality-summary.md
        if [ "${{ needs.python-quality.result }}" != "success" ]; then
          echo "- ❌ Fix Python code quality issues" >> quality-summary.md
        fi
        if [ "${{ needs.javascript-quality.result }}" != "success" ]; then
          echo "- ❌ Fix JavaScript/TypeScript issues" >> quality-summary.md
        fi
        if [ "${{ needs.docker-security.result }}" != "success" ]; then
          echo "- ❌ Address Docker security vulnerabilities" >> quality-summary.md
        fi
        
        cat quality-summary.md
    
    - name: Upload quality summary
      uses: actions/upload-artifact@v4
      with:
        name: quality-summary
        path: quality-summary.md