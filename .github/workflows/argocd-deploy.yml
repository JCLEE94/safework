name: ArgoCD Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: safework
  ARGOCD_SERVER: argo.jclee.me
  ARGOCD_APP_NAME: safework

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, linux]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate metadata
        id: meta
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)
          SHA_SHORT=${GITHUB_SHA:0:7}
          TAG="v${VERSION}-${SHA_SHORT}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Image tag: ${TAG}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.version }}
            GIT_COMMIT=${{ github.sha }}

  update-manifest:
    name: Update K8s Manifest
    needs: build-and-push
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update deployment image
        run: |
          echo "üìù Updating deployment manifest with new image tag..."
          sed -i "s|image: registry.jclee.me/safework:.*|image: registry.jclee.me/safework:${{ needs.build-and-push.outputs.image-tag }}|g" k8s/safework/deployment.yaml
          
          echo "üîç Updated image reference:"
          grep "image:" k8s/safework/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/safework/deployment.yaml
          git commit -m "chore: update image to ${{ needs.build-and-push.outputs.image-tag }}"
          git push

  sync-argocd:
    name: Sync ArgoCD Application
    needs: [build-and-push, update-manifest]
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Install ArgoCD CLI
        run: |
          if ! command -v argocd &> /dev/null; then
            echo "üì¶ Installing ArgoCD CLI..."
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd
          fi
      
      - name: ArgoCD Login
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          echo "üîê Logging into ArgoCD..."
          argocd login ${{ env.ARGOCD_SERVER }} \
            --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} \
            --grpc-web \
            --insecure
      
      - name: Sync Application
        run: |
          echo "üîÑ Syncing ArgoCD application..."
          argocd app sync ${{ env.ARGOCD_APP_NAME }} \
            --force \
            --prune \
            --timeout 300
          
          echo "‚è≥ Waiting for application to be healthy..."
          argocd app wait ${{ env.ARGOCD_APP_NAME }} \
            --health \
            --timeout 600
      
      - name: Get Application Status
        run: |
          echo "üìä Application status:"
          argocd app get ${{ env.ARGOCD_APP_NAME }}
          
          echo "üîç Application resources:"
          argocd app resources ${{ env.ARGOCD_APP_NAME }}

  verify-deployment:
    name: Verify Deployment
    needs: sync-argocd
    runs-on: [self-hosted, linux]
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Health check
        run: |
          echo "üè• Checking application health..."
          for i in {1..10}; do
            if curl -s https://safework.jclee.me/health | jq .; then
              echo "‚úÖ Application is healthy!"
              exit 0
            else
              echo "‚è≥ Waiting for application... (attempt $i/10)"
              sleep 30
            fi
          done
          echo "‚ùå Health check failed after 10 attempts"
          exit 1
      
      - name: Notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment successful!"
            echo "üîó Application URL: https://safework.jclee.me"
            echo "üì¶ Image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
          else
            echo "‚ùå Deployment failed!"
          fi