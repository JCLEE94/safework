# SafeWork Pro - GitOps CI/CD Pipeline (Template Based)
# ÌÖúÌîåÎ¶ø Í∏∞Î∞ò ÏµúÏ†ÅÌôîÎêú Î∞∞Ìè¨ ÌååÏù¥ÌîÑÎùºÏù∏

name: Build and Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ${{ vars.REGISTRY_URL }}
  IMAGE_NAME: ${{ vars.ORG }}/${{ vars.APP_NAME }}

jobs:
  # Î≥ëÎ†¨ Ïã§Ìñâ 1: ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Code formatting check
        run: black --check src/ tests/ || (echo "‚ùå Run: black src/ tests/" && exit 1)

      - name: Import sorting check
        run: isort --check-only src/ tests/ || (echo "‚ùå Run: isort src/ tests/" && exit 1)

      - name: Linting check
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Î≥ëÎ†¨ Ïã§Ìñâ 2: ÌÖåÏä§Ìä∏
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: health_management
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration]
        
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout

      - name: Run tests
        env:
          DATABASE_URL: postgresql://admin:password@localhost:5432/health_management
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-testing-only
          ENVIRONMENT: test
          PYTHONPATH: ${{ github.workspace }}
        run: |
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            echo "üß™ Running unit tests..."
            pytest tests/ -v --cov=src --cov-report=xml --timeout=60 -x -m "not slow and not integration"
          else
            echo "üîó Running integration tests..."
            pytest tests/ -v --timeout=120 -x -m "integration"
          fi

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage.xml

  # Î≥ëÎ†¨ Ïã§Ìñâ 3: ÌîÑÎ°†Ìä∏ÏóîÎìú
  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install and build
        run: |
          npm ci
          npm run type-check
          npm run lint
          npm run test -- --run --coverage
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

  # Docker ÎπåÎìú (Î™®Îì† ÌÖåÏä§Ìä∏ ÌÜµÍ≥º ÌõÑ)
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, test, frontend]
    if: github.event_name != 'pull_request'
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=prod-{{date 'YYYYMMDD'}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64

  # Helm Ï∞®Ìä∏ Î∞∞Ìè¨ (ÌÉúÍ∑∏ Î¶¥Î¶¨Ïä§ ÏãúÏóêÎßå)
  helm-chart:
    name: Deploy Helm Chart
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Update Chart version
        run: |
          CHART_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          cd k8s/helm/${{ vars.APP_NAME }}
          sed -i "s/^version:.*/version: ${CHART_VERSION}/" Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${CHART_VERSION}\"/" Chart.yaml

      - name: Package Helm chart
        run: |
          cd k8s/helm
          helm package ${{ vars.APP_NAME }}/

      - name: Push to ChartMuseum
        run: |
          CHART_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          cd k8s/helm
          curl -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            --data-binary "@${{ vars.APP_NAME }}-${CHART_VERSION}.tgz" \
            ${{ vars.CHARTMUSEUM_URL }}/api/charts

      - name: Deployment notification
        run: |
          echo "üöÄ Chart deployed to ChartMuseum!"
          echo "üìä ArgoCD will sync automatically"
          echo "üîó Monitor: ${{ vars.ARGOCD_URL }}/applications/${{ vars.APP_NAME }}"