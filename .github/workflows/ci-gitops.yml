name: CI/CD GitOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: safework
  HELM_REGISTRY: chart.jclee.me

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.docker.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: admin
        password: bingogo1

    - name: Log in to Helm Registry
      run: |
        echo "bingogo1" | helm registry login ${{ env.HELM_REGISTRY }} --username admin --password-stdin

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=prod-{{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}}

    - name: Build and push Docker image
      id: docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  helm-package-and-push:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Log in to Helm Registry
      run: |
        echo "bingogo1" | helm registry login ${{ env.HELM_REGISTRY }} --username admin --password-stdin

    - name: Update Chart version
      run: |
        cd k8s/helm/safework
        # Update appVersion with the current date and commit SHA
        sed -i "s/appVersion:.*/appVersion: \"$(date +'%Y%m%d')-${GITHUB_SHA:0:7}\"/" Chart.yaml
        # Increment chart version
        CURRENT_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
        NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        sed -i "s/version:.*/version: $NEW_VERSION/" Chart.yaml
        echo "Chart version updated to $NEW_VERSION"

    - name: Package Helm chart
      run: |
        cd k8s/helm
        helm package safework

    - name: Push Helm chart to registry
      run: |
        cd k8s/helm
        CHART_PACKAGE=$(ls safework-*.tgz | head -n 1)
        helm push $CHART_PACKAGE oci://${{ env.HELM_REGISTRY }}/helm-charts

  update-argocd-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Trigger ArgoCD sync
      run: |
        # ArgoCD Image Updater will automatically detect the new image
        # This step is just for logging
        echo "New image pushed: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
        echo "ArgoCD Image Updater will automatically update the deployment"