## 전역 설정
global:
  imageRegistry: registry.jclee.me
  imagePullSecrets:
    - harbor-registry

## 복제본 설정
replicaCount: 1
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## 이미지 설정
image:
  repository: registry.jclee.me/safework
  pullPolicy: Always
  tag: "latest"

## 보안 컨텍스트 (All-in-one 컨테이너용)
podSecurityContext:
  runAsNonRoot: false
  runAsUser: 0
  fsGroup: 0

securityContext:
  allowPrivilegeEscalation: true
  readOnlyRootFilesystem: false
  runAsNonRoot: false
  runAsUser: 0
  capabilities:
    add:
    - SYS_ADMIN
    - DAC_OVERRIDE

## 서비스 설정
service:
  type: NodePort
  port: 80
  targetPort: 3001
  nodePort: 32301

## 리소스 제한 (All-in-one 컨테이너용 - 더 많은 리소스 필요)
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
    ephemeral-storage: 8Gi
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeral-storage: 2Gi

## 환경 변수
env:
  DATABASE_URL: "postgresql://admin:password@localhost:5432/health_management"
  REDIS_HOST: "localhost"
  REDIS_PORT: "6379"
  JWT_SECRET: "prod-jwt-secret-key"
  ENVIRONMENT: "production"
  ADMIN_USERNAME: "admin"
  ADMIN_PASSWORD: "bingogo1"
  TZ: "Asia/Seoul"

## ConfigMap 추가 설정
configMap:
  enabled: false
  data: {}

## Secret 추가 설정  
secrets:
  enabled: false
  data: {}

## 프로브 설정
probes:
  liveness:
    enabled: true
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  readiness:
    enabled: true
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  startup:
    enabled: true
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30

## Volume 마운트 (All-in-one 컨테이너용)
volumeMounts:
  - name: uploads
    mountPath: /app/uploads
  - name: logs
    mountPath: /app/logs
  - name: postgres-data
    mountPath: /var/lib/postgresql/15/main
  - name: redis-data
    mountPath: /var/lib/redis

volumes:
  - name: uploads
    emptyDir: {}
  - name: logs
    emptyDir: {}
  - name: postgres-data
    persistentVolumeClaim:
      claimName: safework-postgres-pvc
  - name: redis-data
    persistentVolumeClaim:
      claimName: safework-redis-pvc

## Node 선택자
nodeSelector: {}

## Tolerations
tolerations: []

## Affinity
affinity: {}

## Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

## Network Policy
networkPolicy:
  enabled: false
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: safework
  egress:
    - to:
      - namespaceSelector: {}
    - to:
      - ipBlock:
          cidr: 0.0.0.0/0
          except:
          - 169.254.169.254/32

## Persistent Volume Claims
persistence:
  postgres:
    enabled: true
    size: 10Gi
    storageClass: local-path
    accessMode: ReadWriteOnce
  redis:
    enabled: true
    size: 5Gi
    storageClass: local-path
    accessMode: ReadWriteOnce

## Service Monitor (Prometheus)
serviceMonitor:
  enabled: false
  interval: 30s
  path: /metrics