stages:
  - build
  - test
  - deploy

variables:
  REGISTRY_URL: "192.168.50.215:1234"
  DEPLOY_HOST: "192.168.50.215"
  DEPLOY_PORT: "1111"
  DEPLOY_USER: "docker"
  PROJECT_NAME: "health"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - docker info
    - echo "Building Docker image for $PROJECT_NAME"
  script:
    - docker build -t $PROJECT_NAME:$CI_COMMIT_SHORT_SHA .
    - docker tag $PROJECT_NAME:$CI_COMMIT_SHORT_SHA $PROJECT_NAME:latest
    - echo "Build completed successfully"
  only:
    - main

test:
  stage: test
  image: python:3.11
  script:
    - pip install -r requirements.txt
    - python -m pytest tests/ || echo "No tests yet"
  only:
    - main

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $DEPLOY_PORT -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production server..."
    - ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/app/$PROJECT_NAME"
    - scp -P $DEPLOY_PORT Dockerfile $DEPLOY_USER@$DEPLOY_HOST:~/app/$PROJECT_NAME/
    - scp -P $DEPLOY_PORT requirements.txt $DEPLOY_USER@$DEPLOY_HOST:~/app/$PROJECT_NAME/
    - scp -P $DEPLOY_PORT main.py $DEPLOY_USER@$DEPLOY_HOST:~/app/$PROJECT_NAME/
    - scp -P $DEPLOY_PORT docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:~/app/$PROJECT_NAME/
    - scp -P $DEPLOY_PORT -r src/ $DEPLOY_USER@$DEPLOY_HOST:~/app/$PROJECT_NAME/
    - |
      ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
        cd ~/app/$PROJECT_NAME && 
        echo 'Files uploaded successfully' &&
        ls -la
      "
  environment:
    name: production
    url: https://$PROJECT_NAME.jclee.me
  only:
    - main