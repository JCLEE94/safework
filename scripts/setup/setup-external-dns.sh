#!/bin/bash

# SafeWork - Kubernetes API Server Ïô∏Î∂Ä DNS ÏÑ§Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏
# Usage: ./setup-external-dns.sh <domain> <master-ip>

set -e

DOMAIN=${1:-"k8s-api.jclee.me"}
MASTER_IP=${2}

if [ -z "$MASTER_IP" ]; then
    echo "‚ùå Error: Master IP is required"
    echo "Usage: $0 <domain> <master-ip>"
    echo "Example: $0 k8s-api.jclee.me 192.168.1.100"
    exit 1
fi

echo "üöÄ Setting up external DNS for Kubernetes API Server"
echo "Domain: $DOMAIN"
echo "Master IP: $MASTER_IP"
echo "API URL: https://$DOMAIN:6443"

# Step 1: DNS Ìï¥ÏÑù ÌôïÏù∏
echo "üîç Step 1: DNS Ìï¥ÏÑù ÌôïÏù∏"
if nslookup $DOMAIN > /dev/null 2>&1; then
    echo "‚úÖ DNS Ìï¥ÏÑù ÏÑ±Í≥µ: $DOMAIN"
    RESOLVED_IP=$(nslookup $DOMAIN | grep -A 1 "Name:" | tail -1 | awk '{print $2}')
    echo "Ìï¥ÏÑùÎêú IP: $RESOLVED_IP"
    
    if [ "$RESOLVED_IP" = "$MASTER_IP" ]; then
        echo "‚úÖ DNS Î†àÏΩîÎìúÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏÑ§Ï†ïÎê®"
    else
        echo "‚ö†Ô∏è  DNS Î†àÏΩîÎìúÍ∞Ä Îã§Î•∏ IPÎ°ú ÏÑ§Ï†ïÎê® (ÏÑ§Ï†ï: $RESOLVED_IP, ÏòàÏÉÅ: $MASTER_IP)"
    fi
else
    echo "‚ùå DNS Ìï¥ÏÑù Ïã§Ìå®. DNS Î†àÏΩîÎìúÎ•º Î®ºÏ†Ä ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî."
    echo "Îã§ÏùåÍ≥º Í∞ôÏù¥ DNS Î†àÏΩîÎìúÎ•º ÏÉùÏÑ±ÌïòÏÑ∏Ïöî:"
    echo "Type: A"
    echo "Name: ${DOMAIN%%.*}"
    echo "Value: $MASTER_IP"
    echo "TTL: 300"
    exit 1
fi

# Step 2: API ÏÑúÎ≤Ñ Ï†ëÍ∑º ÌÖåÏä§Ìä∏
echo "üîç Step 2: API ÏÑúÎ≤Ñ Ï†ëÍ∑º ÌÖåÏä§Ìä∏"
if curl -k --connect-timeout 10 https://$DOMAIN:6443/version > /dev/null 2>&1; then
    echo "‚úÖ API ÏÑúÎ≤Ñ Ï†ëÍ∑º ÏÑ±Í≥µ"
    API_VERSION=$(curl -k -s https://$DOMAIN:6443/version | jq -r '.gitVersion' 2>/dev/null || echo "Unknown")
    echo "Kubernetes Î≤ÑÏ†Ñ: $API_VERSION"
else
    echo "‚ùå API ÏÑúÎ≤Ñ Ï†ëÍ∑º Ïã§Ìå®"
    echo "ÌôïÏù∏ÏÇ¨Ìï≠:"
    echo "1. Ìè¨Ìä∏ 6443Ïù¥ Ïô∏Î∂ÄÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏"
    echo "2. Î∞©ÌôîÎ≤Ω ÏÑ§Ï†ï ÌôïÏù∏"
    echo "3. Kubernetes API ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏"
    
    # Ìè¨Ìä∏ ÌôïÏù∏
    echo "üîç Ìè¨Ìä∏ 6443 Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏..."
    if nc -zv $MASTER_IP 6443 2>/dev/null; then
        echo "‚úÖ Ìè¨Ìä∏ 6443 Ï†ëÍ∑º Í∞ÄÎä•"
    else
        echo "‚ùå Ìè¨Ìä∏ 6443 Ï†ëÍ∑º Î∂àÍ∞Ä"
        echo "Î∞©ÌôîÎ≤Ω ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî:"
        echo "sudo ufw allow 6443/tcp"
    fi
fi

# Step 3: SSL Ïù∏Ï¶ùÏÑú ÌôïÏù∏
echo "üîç Step 3: SSL Ïù∏Ï¶ùÏÑú ÌôïÏù∏"
SSL_INFO=$(echo | openssl s_client -connect $DOMAIN:6443 -servername $DOMAIN 2>/dev/null | openssl x509 -noout -subject -dates 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ SSL Ïù∏Ï¶ùÏÑú Ï†ïÎ≥¥:"
    echo "$SSL_INFO"
    
    # SAN ÌôïÏù∏
    SAN_INFO=$(echo | openssl s_client -connect $DOMAIN:6443 -servername $DOMAIN 2>/dev/null | openssl x509 -noout -text 2>/dev/null | grep -A 1 "Subject Alternative Name")
    if echo "$SAN_INFO" | grep -q "$DOMAIN"; then
        echo "‚úÖ SANÏóê ÎèÑÎ©îÏù∏Ïù¥ Ìè¨Ìï®Îê®"
    else
        echo "‚ö†Ô∏è  SANÏóê ÎèÑÎ©îÏù∏Ïù¥ Ìè¨Ìï®ÎêòÏßÄ ÏïäÏùå. API ÏÑúÎ≤Ñ Ïù∏Ï¶ùÏÑú ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî"
        echo "kube-apiserver.yamlÏóê Îã§Ïùå ÏÑ§Ï†ï Ï∂îÍ∞Ä:"
        echo "--tls-san-dns=$DOMAIN"
    fi
else
    echo "‚ùå SSL Ïù∏Ï¶ùÏÑú ÌôïÏù∏ Ïã§Ìå®"
fi

# Step 4: kubeconfig ÏÉùÏÑ±
echo "üîç Step 4: kubeconfig ÌÖúÌîåÎ¶ø ÏÉùÏÑ±"
KUBECONFIG_FILE="kubeconfig-external-$DOMAIN"
cat > $KUBECONFIG_FILE << EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    server: https://$DOMAIN:6443
    # certificate-authority-dataÎ•º ÌòÑÏû¨ ÌÅ¥Îü¨Ïä§ÌÑ∞ÏóêÏÑú Î≥µÏÇ¨Ìï¥Ïïº Ìï®
    insecure-skip-tls-verify: true  # ÏûÑÏãúÎ°ú ÏÑ§Ï†ï, Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî CA Ïù∏Ï¶ùÏÑú ÏÇ¨Ïö©
  name: external-cluster
contexts:
- context:
    cluster: external-cluster
    user: external-user
  name: external-context
current-context: external-context
users:
- name: external-user
  user:
    # client-certificate-dataÏôÄ client-key-dataÎ•º ÌòÑÏû¨ ÌÅ¥Îü¨Ïä§ÌÑ∞ÏóêÏÑú Î≥µÏÇ¨Ìï¥Ïïº Ìï®
    token: "YOUR_SERVICE_ACCOUNT_TOKEN"
EOF

echo "‚úÖ kubeconfig ÌÖúÌîåÎ¶ø ÏÉùÏÑ±: $KUBECONFIG_FILE"
echo "Ïù¥ ÌååÏùºÏùÑ Ìé∏ÏßëÌïòÏó¨ Ïã§Ï†ú Ïù∏Ï¶ù Ï†ïÎ≥¥Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî."

# Step 5: ArgoCD ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ï§ÄÎπÑ
echo "üîç Step 5: ArgoCD ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ï§ÄÎπÑ"
NEW_CLUSTER_URL="https://$DOMAIN:6443"

echo "ArgoCD ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÑ§Ï†ïÏùÑ ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎ†§Î©¥ Îã§Ïùå Î™ÖÎ†πÏñ¥Î•º Ïã§ÌñâÌïòÏÑ∏Ïöî:"
echo ""
echo "# 1. ÏÉà ÌÅ¥Îü¨Ïä§ÌÑ∞ Ï∂îÍ∞Ä"
echo "argocd cluster add external-context --name external-k8s --grpc-web"
echo ""
echo "# 2. Application Îß§ÎãàÌéòÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏"
echo "sed -i 's|server: https://kubernetes.default.svc|server: $NEW_CLUSTER_URL|g' k8s/argocd/application.yaml"
echo ""
echo "# 3. Application Ïû¨ÏÉùÏÑ±"
echo "argocd app delete safework --grpc-web --yes"
echo "argocd app create --grpc-web -f k8s/argocd/application.yaml"

echo ""
echo "üéâ Ïô∏Î∂Ä DNS ÏÑ§Ï†ï ÏôÑÎ£å!"
echo "üìã ÏöîÏïΩ:"
echo "  - ÎèÑÎ©îÏù∏: $DOMAIN"
echo "  - API URL: https://$DOMAIN:6443"
echo "  - kubeconfig: $KUBECONFIG_FILE"
echo ""
echo "Îã§Ïùå Îã®Í≥Ñ:"
echo "1. kubeconfig ÌååÏùºÏóê Ïã§Ï†ú Ïù∏Ï¶ù Ï†ïÎ≥¥ Ï∂îÍ∞Ä"
echo "2. ArgoCD ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏"
echo "3. SSL Ïù∏Ï¶ùÏÑú SAN ÏóÖÎç∞Ïù¥Ìä∏ (ÌïÑÏöîÌïú Í≤ΩÏö∞)"