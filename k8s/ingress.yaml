---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: safework-ingress
  namespace: safework
  labels:
    app: safework
    component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://safework.jclee.me"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - safework.jclee.me
    secretName: safework-tls
  rules:
  - host: safework.jclee.me
    http:
      paths:
      # 모든 경로를 all-in-one safework 서비스로 라우팅
      - path: /
        pathType: Prefix
        backend:
          service:
            name: safework
            port:
              number: 3001
---
# ClusterIssuer for Let's Encrypt (if not already exists)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@jclee.me
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Alternative LoadBalancer service for direct access (optional)
apiVersion: v1
kind: Service
metadata:
  name: safework-loadbalancer
  namespace: safework
  labels:
    app: safework
    component: loadbalancer
spec:
  type: LoadBalancer
  ports:
    - port: 33301
      targetPort: 3001
      protocol: TCP
      name: safework
  selector:
    app: safework