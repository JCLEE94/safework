---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: safework
  labels:
    app: safework
    component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: safework
    component: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: safework-frontend
  namespace: safework
  labels:
    app: safework
    component: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: safework
      component: frontend
  template:
    metadata:
      labels:
        app: safework
        component: frontend
    spec:
      imagePullSecrets:
      - name: registry-secret
      containers:
      - name: safework-frontend
        image: registry.jclee.me/safework:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Update Nginx configuration for K8s environment
          cat > /etc/nginx/conf.d/default.conf << 'EOF'
          server {
              listen 80;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;
              
              # Frontend routing
              location / {
                  try_files $uri $uri/ /index.html;
                  add_header Cache-Control "no-cache, must-revalidate";
              }
              
              # API proxy to backend service
              location /api/ {
                  proxy_pass http://backend-service:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # WebSocket support for real-time features
              location /ws {
                  proxy_pass http://backend-service:8000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              # Health check endpoint
              location /nginx-health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
              
              # Security headers
              add_header X-Frame-Options DENY;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              add_header Referrer-Policy "strict-origin-when-cross-origin";
          }
          EOF
          
          # Start Nginx
          nginx -g "daemon off;"
        
        env:
        - name: NGINX_ENTRYPOINT_QUIET_LOGS
          value: "1"
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        livenessProbe:
          httpGet:
            path: /nginx-health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /nginx-health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      
      restartPolicy: Always
      terminationGracePeriodSeconds: 30