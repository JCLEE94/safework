# ======================================
# SafeWork Pro 개발 환경 오버라이드 설정
# ======================================
# 이 파일은 docker-compose.yml과 함께 자동으로 로드됩니다.
# 개발 환경에서만 사용됩니다.

version: '3.8'

services:
  # 개발 환경용 PostgreSQL (별도 컨테이너)
  postgres:
    image: postgres:15-alpine
    container_name: safework-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-health_management}
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - safework-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d health_management"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"  # 개발 환경에서만 외부 접근 허용

  # 개발 환경용 Redis (별도 컨테이너)
  redis:
    image: redis:7-alpine
    container_name: safework-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - safework-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"  # 개발 환경에서만 외부 접근 허용

  # SafeWork Pro 애플리케이션 (개발 모드)
  safework:
    image: ${DOCKER_IMAGE:-registry.jclee.me/safework:latest}
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        BUILD_TIME: ${BUILD_TIME}
    environment:
      # 개발 환경 설정 오버라이드
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # 별도 컨테이너 DB/Redis 사용
      DATABASE_URL: postgresql://admin:password@postgres:5432/health_management
      REDIS_URL: redis://redis:6379/0
      
      # 개발용 CORS 설정
      CORS_ORIGINS: '["http://localhost:3001", "http://localhost:3000", "http://localhost:5173"]'
    
    volumes:
      # 개발 환경용 볼륨 마운트 (로컬 개발)
      - ./src:/app/src:ro
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./dist:/app/dist
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # 개발 환경에서는 Watchtower 비활성화
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    
    # 개발용 포트 매핑
    ports:
      - "3001:3001"
      - "8000:8000"  # FastAPI 직접 접근용

# 개발 환경용 추가 볼륨
volumes:
  postgres_data_dev:
  redis_data_dev:

# 기본 네트워크 확장
networks:
  safework-network:
    external: false  # 개발 환경에서는 로컬 네트워크 사용