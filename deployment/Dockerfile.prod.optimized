# Multi-stage build for optimized image size
# Stage 1: Frontend build
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files first for better caching
COPY frontend/package*.json ./
RUN npm ci --only=production

# Copy frontend source and build
COPY frontend/ ./
RUN npm run build

# Stage 2: Backend dependencies
FROM python:3.11-slim AS python-deps

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Final image
FROM python:3.11-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    fonts-nanum \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python dependencies from builder
COPY --from=python-deps /root/.local /root/.local
ENV PATH=/root/.local/bin:$PATH

# Create app user
RUN groupadd -r app && useradd -r -g app app

WORKDIR /app

# Copy application code
COPY src/ ./src/
COPY document/ ./document/

# Copy frontend build from builder  
COPY --from=frontend-builder /app/frontend/dist ./dist/

# Create necessary directories
RUN mkdir -p uploads logs && \
    chown -R app:app /app

# Environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=3001

# Build arguments
ARG BUILD_TIME
ARG GIT_COMMIT
ARG VERSION
ENV BUILD_TIME=${BUILD_TIME} \
    GIT_COMMIT=${GIT_COMMIT} \
    VERSION=${VERSION}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    CMD curl -f http://localhost:3001/health || exit 1

EXPOSE 3001

# Run as non-root user  
USER app

# Use FastAPI directly like the working Dockerfile
CMD ["uvicorn", "src.app:app", "--host", "0.0.0.0", "--port", "3001"]